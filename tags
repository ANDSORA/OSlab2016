!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASM	game/lib/string.c	9;"	d	file:
ASM	kernel/lib/string.c	9;"	d	file:
Assert	kernel/inc/assert.h	18;"	d
BOOT	Makefile	/^BOOT    := boot.bin$/;"	m
BOOT_C	Makefile	/^BOOT_C := $(wildcard $(BOOT_DIR)\/*.c)$/;"	m
BOOT_DIR	Makefile	/^BOOT_DIR       := boot$/;"	m
BOOT_O	Makefile	/^BOOT_O := $(BOOT_S:%.S=$(OBJ_DIR)\/%.o)$/;"	m
BOOT_S	Makefile	/^BOOT_S := $(wildcard $(BOOT_DIR)\/*.S)$/;"	m
BT_HEIGHT	game/inc/video.h	19;"	d
BT_HEIGHT	kernel/inc/device/video.h	21;"	d
BT_WIDTH	game/inc/video.h	18;"	d
BT_WIDTH	kernel/inc/device/video.h	20;"	d
BT_WIDTH_SIZE	game/inc/video.h	20;"	d
BT_WIDTH_SIZE	kernel/inc/device/video.h	22;"	d
Bullet	game/src/effect.c	/^struct Bullet {$/;"	s	file:
Bullet::h	game/src/effect.c	/^	int w,h;$/;"	m	struct:Bullet	file:	access:public
Bullet::next	game/src/effect.c	/^	struct Bullet *next;$/;"	m	struct:Bullet	typeref:struct:Bullet::Bullet	file:	access:public
Bullet::w	game/src/effect.c	/^	int w,h;$/;"	m	struct:Bullet	file:	access:public
Bullet::x	game/src/effect.c	/^	int x,y;$/;"	m	struct:Bullet	file:	access:public
Bullet::y	game/src/effect.c	/^	int x,y;$/;"	m	struct:Bullet	file:	access:public
CC	Makefile	/^CC      := gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -Wall -Werror -Wfatal-errors #开启所有警告, 视警告为错误, 第一个错误结束编译$/;"	m
CR0_AM	boot/inc/mmu.h	86;"	d
CR0_AM	kernel/inc/mmu.h	86;"	d
CR0_AM	tools/hh/mmu.h	28;"	d
CR0_CD	boot/inc/mmu.h	88;"	d
CR0_CD	kernel/inc/mmu.h	88;"	d
CR0_CD	tools/hh/mmu.h	30;"	d
CR0_EM	boot/inc/mmu.h	81;"	d
CR0_EM	kernel/inc/mmu.h	81;"	d
CR0_EM	tools/hh/mmu.h	23;"	d
CR0_ET	boot/inc/mmu.h	83;"	d
CR0_ET	kernel/inc/mmu.h	83;"	d
CR0_ET	tools/hh/mmu.h	25;"	d
CR0_MP	boot/inc/mmu.h	80;"	d
CR0_MP	kernel/inc/mmu.h	80;"	d
CR0_MP	tools/hh/mmu.h	22;"	d
CR0_NE	boot/inc/mmu.h	84;"	d
CR0_NE	kernel/inc/mmu.h	84;"	d
CR0_NE	tools/hh/mmu.h	26;"	d
CR0_NW	boot/inc/mmu.h	87;"	d
CR0_NW	kernel/inc/mmu.h	87;"	d
CR0_NW	tools/hh/mmu.h	29;"	d
CR0_PE	boot/inc/mmu.h	79;"	d
CR0_PE	kernel/inc/mmu.h	79;"	d
CR0_PE	tools/hh/mmu.h	21;"	d
CR0_PG	boot/inc/mmu.h	89;"	d
CR0_PG	kernel/inc/mmu.h	89;"	d
CR0_PG	tools/hh/mmu.h	31;"	d
CR0_TS	boot/inc/mmu.h	82;"	d
CR0_TS	kernel/inc/mmu.h	82;"	d
CR0_TS	tools/hh/mmu.h	24;"	d
CR0_WP	boot/inc/mmu.h	85;"	d
CR0_WP	kernel/inc/mmu.h	85;"	d
CR0_WP	tools/hh/mmu.h	27;"	d
CR4_DE	boot/inc/mmu.h	94;"	d
CR4_DE	kernel/inc/mmu.h	94;"	d
CR4_DE	tools/hh/mmu.h	36;"	d
CR4_MCE	boot/inc/mmu.h	92;"	d
CR4_MCE	kernel/inc/mmu.h	92;"	d
CR4_MCE	tools/hh/mmu.h	34;"	d
CR4_PCE	boot/inc/mmu.h	91;"	d
CR4_PCE	kernel/inc/mmu.h	91;"	d
CR4_PCE	tools/hh/mmu.h	33;"	d
CR4_PSE	boot/inc/mmu.h	93;"	d
CR4_PSE	kernel/inc/mmu.h	93;"	d
CR4_PSE	tools/hh/mmu.h	35;"	d
CR4_PVI	boot/inc/mmu.h	96;"	d
CR4_PVI	kernel/inc/mmu.h	96;"	d
CR4_PVI	tools/hh/mmu.h	38;"	d
CR4_TSD	boot/inc/mmu.h	95;"	d
CR4_TSD	kernel/inc/mmu.h	95;"	d
CR4_TSD	tools/hh/mmu.h	37;"	d
CR4_VME	boot/inc/mmu.h	97;"	d
CR4_VME	kernel/inc/mmu.h	97;"	d
CR4_VME	tools/hh/mmu.h	39;"	d
Capabilities	kernel/inc/device/video_mode.h	/^	uint8_t Capabilities[4];$/;"	m	struct:VbeInfoBlock	access:public
CmdByte	kernel/device/timer.c	/^union CmdByte {$/;"	u	file:
CmdByte::__anon6::access_mode	kernel/device/timer.c	/^		uint8_t access_mode  : 2;$/;"	m	struct:CmdByte::__anon6	file:	access:public
CmdByte::__anon6::channel	kernel/device/timer.c	/^		uint8_t channel      : 2;$/;"	m	struct:CmdByte::__anon6	file:	access:public
CmdByte::__anon6::operate_mode	kernel/device/timer.c	/^		uint8_t operate_mode : 3;$/;"	m	struct:CmdByte::__anon6	file:	access:public
CmdByte::__anon6::present_mode	kernel/device/timer.c	/^		uint8_t present_mode : 1;$/;"	m	struct:CmdByte::__anon6	file:	access:public
CmdByte::val	kernel/device/timer.c	/^	uint8_t val;$/;"	m	union:CmdByte	file:	access:public
DD	Makefile	/^DD      := dd$/;"	m
DEPS	Makefile	/^DEPS := $(shell find -name "*.d")$/;"	m
DPL_KERNEL	boot/inc/mmu.h	133;"	d
DPL_KERNEL	kernel/inc/mmu.h	133;"	d
DPL_KERNEL	tools/hh/mmu.h	72;"	d
DPL_USER	boot/inc/mmu.h	134;"	d
DPL_USER	kernel/inc/mmu.h	134;"	d
DPL_USER	tools/hh/mmu.h	73;"	d
ELF_MAGIC	boot/inc/elf.h	4;"	d
ELF_MAGIC	kernel/inc/elf.h	4;"	d
ELF_PROG_FLAG_EXEC	boot/inc/elf.h	52;"	d
ELF_PROG_FLAG_EXEC	kernel/inc/elf.h	52;"	d
ELF_PROG_FLAG_READ	boot/inc/elf.h	54;"	d
ELF_PROG_FLAG_READ	kernel/inc/elf.h	54;"	d
ELF_PROG_FLAG_WRITE	boot/inc/elf.h	53;"	d
ELF_PROG_FLAG_WRITE	kernel/inc/elf.h	53;"	d
ELF_PROG_LOAD	boot/inc/elf.h	49;"	d
ELF_PROG_LOAD	kernel/inc/elf.h	49;"	d
ELF_SHN_UNDEF	boot/inc/elf.h	63;"	d
ELF_SHN_UNDEF	kernel/inc/elf.h	63;"	d
ELF_SHT_NULL	boot/inc/elf.h	57;"	d
ELF_SHT_NULL	kernel/inc/elf.h	57;"	d
ELF_SHT_PROGBITS	boot/inc/elf.h	58;"	d
ELF_SHT_PROGBITS	kernel/inc/elf.h	58;"	d
ELF_SHT_STRTAB	boot/inc/elf.h	60;"	d
ELF_SHT_STRTAB	kernel/inc/elf.h	60;"	d
ELF_SHT_SYMTAB	boot/inc/elf.h	59;"	d
ELF_SHT_SYMTAB	kernel/inc/elf.h	59;"	d
Elf	boot/inc/elf.h	/^struct Elf {$/;"	s
Elf	kernel/inc/elf.h	/^struct Elf {$/;"	s
Elf::e_ehsize	boot/inc/elf.h	/^	uint16_t e_ehsize;$/;"	m	struct:Elf	access:public
Elf::e_ehsize	kernel/inc/elf.h	/^	uint16_t e_ehsize;$/;"	m	struct:Elf	access:public
Elf::e_elf	boot/inc/elf.h	/^	uint8_t e_elf[12];$/;"	m	struct:Elf	access:public
Elf::e_elf	kernel/inc/elf.h	/^	uint8_t e_elf[12];$/;"	m	struct:Elf	access:public
Elf::e_entry	boot/inc/elf.h	/^	uint32_t e_entry;$/;"	m	struct:Elf	access:public
Elf::e_entry	kernel/inc/elf.h	/^	uint32_t e_entry;$/;"	m	struct:Elf	access:public
Elf::e_flags	boot/inc/elf.h	/^	uint32_t e_flags;$/;"	m	struct:Elf	access:public
Elf::e_flags	kernel/inc/elf.h	/^	uint32_t e_flags;$/;"	m	struct:Elf	access:public
Elf::e_machine	boot/inc/elf.h	/^	uint16_t e_machine;$/;"	m	struct:Elf	access:public
Elf::e_machine	kernel/inc/elf.h	/^	uint16_t e_machine;$/;"	m	struct:Elf	access:public
Elf::e_magic	boot/inc/elf.h	/^	uint32_t e_magic;	\/\/ must equal ELF_MAGIC$/;"	m	struct:Elf	access:public
Elf::e_magic	kernel/inc/elf.h	/^	uint32_t e_magic;	\/\/ must equal ELF_MAGIC$/;"	m	struct:Elf	access:public
Elf::e_phentsize	boot/inc/elf.h	/^	uint16_t e_phentsize;$/;"	m	struct:Elf	access:public
Elf::e_phentsize	kernel/inc/elf.h	/^	uint16_t e_phentsize;$/;"	m	struct:Elf	access:public
Elf::e_phnum	boot/inc/elf.h	/^	uint16_t e_phnum;$/;"	m	struct:Elf	access:public
Elf::e_phnum	kernel/inc/elf.h	/^	uint16_t e_phnum;$/;"	m	struct:Elf	access:public
Elf::e_phoff	boot/inc/elf.h	/^	uint32_t e_phoff;$/;"	m	struct:Elf	access:public
Elf::e_phoff	kernel/inc/elf.h	/^	uint32_t e_phoff;$/;"	m	struct:Elf	access:public
Elf::e_shentsize	boot/inc/elf.h	/^	uint16_t e_shentsize;$/;"	m	struct:Elf	access:public
Elf::e_shentsize	kernel/inc/elf.h	/^	uint16_t e_shentsize;$/;"	m	struct:Elf	access:public
Elf::e_shnum	boot/inc/elf.h	/^	uint16_t e_shnum;$/;"	m	struct:Elf	access:public
Elf::e_shnum	kernel/inc/elf.h	/^	uint16_t e_shnum;$/;"	m	struct:Elf	access:public
Elf::e_shoff	boot/inc/elf.h	/^	uint32_t e_shoff;$/;"	m	struct:Elf	access:public
Elf::e_shoff	kernel/inc/elf.h	/^	uint32_t e_shoff;$/;"	m	struct:Elf	access:public
Elf::e_shstrndx	boot/inc/elf.h	/^	uint16_t e_shstrndx;$/;"	m	struct:Elf	access:public
Elf::e_shstrndx	kernel/inc/elf.h	/^	uint16_t e_shstrndx;$/;"	m	struct:Elf	access:public
Elf::e_type	boot/inc/elf.h	/^	uint16_t e_type;$/;"	m	struct:Elf	access:public
Elf::e_type	kernel/inc/elf.h	/^	uint16_t e_type;$/;"	m	struct:Elf	access:public
Elf::e_version	boot/inc/elf.h	/^	uint32_t e_version;$/;"	m	struct:Elf	access:public
Elf::e_version	kernel/inc/elf.h	/^	uint32_t e_version;$/;"	m	struct:Elf	access:public
Enemy	game/src/effect.c	/^struct Enemy {$/;"	s	file:
Enemy::h	game/src/effect.c	/^	int w, h;$/;"	m	struct:Enemy	file:	access:public
Enemy::next	game/src/effect.c	/^	struct Enemy *next;$/;"	m	struct:Enemy	typeref:struct:Enemy::Enemy	file:	access:public
Enemy::w	game/src/effect.c	/^	int w, h;$/;"	m	struct:Enemy	file:	access:public
Enemy::x	game/src/effect.c	/^	int x, y;$/;"	m	struct:Enemy	file:	access:public
Enemy::y	game/src/effect.c	/^	int x, y;$/;"	m	struct:Enemy	file:	access:public
FEC_PR	boot/inc/mmu.h	123;"	d
FEC_PR	kernel/inc/mmu.h	123;"	d
FEC_U	boot/inc/mmu.h	125;"	d
FEC_U	kernel/inc/mmu.h	125;"	d
FEC_WR	boot/inc/mmu.h	124;"	d
FEC_WR	kernel/inc/mmu.h	124;"	d
FF_HEIGHT	game/inc/video.h	16;"	d
FF_HEIGHT	kernel/inc/device/video.h	18;"	d
FF_WIDTH	game/inc/video.h	15;"	d
FF_WIDTH	kernel/inc/device/video.h	17;"	d
FF_WIDTH_SIZE	game/inc/video.h	17;"	d
FF_WIDTH_SIZE	kernel/inc/device/video.h	19;"	d
FL_AC	boot/inc/mmu.h	117;"	d
FL_AC	kernel/inc/mmu.h	117;"	d
FL_AC	tools/hh/mmu.h	59;"	d
FL_AF	boot/inc/mmu.h	102;"	d
FL_AF	kernel/inc/mmu.h	102;"	d
FL_AF	tools/hh/mmu.h	44;"	d
FL_CF	boot/inc/mmu.h	100;"	d
FL_CF	kernel/inc/mmu.h	100;"	d
FL_CF	tools/hh/mmu.h	42;"	d
FL_DF	boot/inc/mmu.h	107;"	d
FL_DF	kernel/inc/mmu.h	107;"	d
FL_DF	tools/hh/mmu.h	49;"	d
FL_ID	boot/inc/mmu.h	120;"	d
FL_ID	kernel/inc/mmu.h	120;"	d
FL_ID	tools/hh/mmu.h	62;"	d
FL_IF	boot/inc/mmu.h	106;"	d
FL_IF	kernel/inc/mmu.h	106;"	d
FL_IF	tools/hh/mmu.h	48;"	d
FL_IOPL_0	boot/inc/mmu.h	110;"	d
FL_IOPL_0	kernel/inc/mmu.h	110;"	d
FL_IOPL_0	tools/hh/mmu.h	52;"	d
FL_IOPL_1	boot/inc/mmu.h	111;"	d
FL_IOPL_1	kernel/inc/mmu.h	111;"	d
FL_IOPL_1	tools/hh/mmu.h	53;"	d
FL_IOPL_2	boot/inc/mmu.h	112;"	d
FL_IOPL_2	kernel/inc/mmu.h	112;"	d
FL_IOPL_2	tools/hh/mmu.h	54;"	d
FL_IOPL_3	boot/inc/mmu.h	113;"	d
FL_IOPL_3	kernel/inc/mmu.h	113;"	d
FL_IOPL_3	tools/hh/mmu.h	55;"	d
FL_IOPL_MASK	boot/inc/mmu.h	109;"	d
FL_IOPL_MASK	kernel/inc/mmu.h	109;"	d
FL_IOPL_MASK	tools/hh/mmu.h	51;"	d
FL_NT	boot/inc/mmu.h	114;"	d
FL_NT	kernel/inc/mmu.h	114;"	d
FL_NT	tools/hh/mmu.h	56;"	d
FL_OF	boot/inc/mmu.h	108;"	d
FL_OF	kernel/inc/mmu.h	108;"	d
FL_OF	tools/hh/mmu.h	50;"	d
FL_PF	boot/inc/mmu.h	101;"	d
FL_PF	kernel/inc/mmu.h	101;"	d
FL_PF	tools/hh/mmu.h	43;"	d
FL_RF	boot/inc/mmu.h	115;"	d
FL_RF	kernel/inc/mmu.h	115;"	d
FL_RF	tools/hh/mmu.h	57;"	d
FL_SF	boot/inc/mmu.h	104;"	d
FL_SF	kernel/inc/mmu.h	104;"	d
FL_SF	tools/hh/mmu.h	46;"	d
FL_TF	boot/inc/mmu.h	105;"	d
FL_TF	kernel/inc/mmu.h	105;"	d
FL_TF	tools/hh/mmu.h	47;"	d
FL_VIF	boot/inc/mmu.h	118;"	d
FL_VIF	kernel/inc/mmu.h	118;"	d
FL_VIF	tools/hh/mmu.h	60;"	d
FL_VIP	boot/inc/mmu.h	119;"	d
FL_VIP	kernel/inc/mmu.h	119;"	d
FL_VIP	tools/hh/mmu.h	61;"	d
FL_VM	boot/inc/mmu.h	116;"	d
FL_VM	kernel/inc/mmu.h	116;"	d
FL_VM	tools/hh/mmu.h	58;"	d
FL_ZF	boot/inc/mmu.h	103;"	d
FL_ZF	kernel/inc/mmu.h	103;"	d
FL_ZF	tools/hh/mmu.h	45;"	d
GAME	Makefile	/^GAME    := game.bin$/;"	m
GAME_C	Makefile	/^GAME_C := $(shell find $(GAME_DIR) -name "*.c")$/;"	m
GAME_DIR	Makefile	/^GAME_DIR	   := game$/;"	m
GAME_LD_SCRIPT	Makefile	/^GAME_LD_SCRIPT	 := $(shell find $(GAME_DIR) -name "*.ld")$/;"	m
GAME_O	Makefile	/^GAME_O := $(GAME_C:%.c=$(OBJ_DIR)\/%.o)$/;"	m
GAME_OFFSET_IN_DISK	kernel/main.c	9;"	d	file:
GDB	Makefile	/^GDB     := gdb$/;"	m
GDB_OPTIONS	Makefile	/^GDB_OPTIONS := -ex "target remote 127.0.0.1:1234"$/;"	m
GDT_ENTRY	boot/start.S	/^#define GDT_ENTRY(n)	\\$/;"	d
GateDescriptor	boot/inc/mmu.h	/^typedef struct GateDescriptor {$/;"	s
GateDescriptor	kernel/inc/mmu.h	/^typedef struct GateDescriptor {$/;"	s
GateDescriptor	tools/hh/mmu.h	/^struct GateDescriptor {$/;"	s
GateDescriptor::gd_args	boot/inc/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_args	kernel/inc/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_dpl	boot/inc/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_dpl	kernel/inc/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_off_15_0	boot/inc/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_off_15_0	kernel/inc/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_off_31_16	boot/inc/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_off_31_16	kernel/inc/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_p	boot/inc/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_p	kernel/inc/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_rsv1	boot/inc/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_rsv1	kernel/inc/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_s	boot/inc/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_s	kernel/inc/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_sel	boot/inc/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_sel	kernel/inc/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_type	boot/inc/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::gd_type	kernel/inc/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::offset_15_0	tools/hh/mmu.h	/^	uint32_t offset_15_0      : 16;\/\/low 16bit of offset in segment$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::offset_31_16	tools/hh/mmu.h	/^	uint32_t offset_31_16     : 16;\/\/high bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::pad0	tools/hh/mmu.h	/^	uint32_t pad0             : 8;\/\/low 5#args, 0 for interrupt\/trap gates high 3bit:reserved(should be 0 I guess)$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::present	tools/hh/mmu.h	/^	uint32_t present          : 1;\/\/Present$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::privilege_level	tools/hh/mmu.h	/^	uint32_t privilege_level  : 2;\/\/descriptor(meaning new)privilege$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::segment	tools/hh/mmu.h	/^	uint32_t segment          : 16;\/\/segment selector$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::system	tools/hh/mmu.h	/^	uint32_t system           : 1;\/\/must be 0(system)$/;"	m	struct:GateDescriptor	access:public
GateDescriptor::type	tools/hh/mmu.h	/^	uint32_t type             : 4;\/\/type(STS_{TG,IG32,TG32})$/;"	m	struct:GateDescriptor	access:public
Gatedesc	boot/inc/mmu.h	/^} Gatedesc;$/;"	t	typeref:struct:GateDescriptor
Gatedesc	kernel/inc/mmu.h	/^} Gatedesc;$/;"	t	typeref:struct:GateDescriptor
HZ	kernel/device/timer.c	7;"	d	file:
IMAGE	Makefile	/^IMAGE   := disk.bin$/;"	m
INIT_WORK	kernel/main.c	/^void INIT_WORK(){$/;"	f
INTERRUPT_GATE_32	kernel/irq/idt.c	5;"	d	file:
IRQ_OFFSET	kernel/irq/i8259.c	5;"	d	file:
IRQ_SLAVE	kernel/irq/i8259.c	6;"	d	file:
IRQ_t	kernel/irq/irq_handle.c	/^struct IRQ_t {$/;"	s	file:
IRQ_t::next	kernel/irq/irq_handle.c	/^	struct IRQ_t *next;$/;"	m	struct:IRQ_t	typeref:struct:IRQ_t::IRQ_t	file:	access:public
IRQ_t::routine	kernel/irq/irq_handle.c	/^	void (*routine)(void);$/;"	m	struct:IRQ_t	file:	access:public
JOS_INC_MMU_H	tools/hh/mmu.h	2;"	d
KERNEL	Makefile	/^KERNEL  := kernel.bin$/;"	m
KERNEL_C	Makefile	/^KERNEL_C := $(shell find $(KERNEL_DIR) -name "*.c")$/;"	m
KERNEL_DIR	Makefile	/^KERNEL_DIR     := kernel$/;"	m
KERNEL_LD_SCRIPT	Makefile	/^KERNEL_LD_SCRIPT := $(shell find $(KERNEL_DIR) -name "*.ld")$/;"	m
KERNEL_O	Makefile	/^KERNEL_O := $(KERNEL_C:%.c=$(OBJ_DIR)\/%.o)$/;"	m
KERNEL_OFFSET_IN_DISK	boot/boot.c	6;"	d	file:
KERNEL_S	Makefile	/^KERNEL_S := $(shell find $(KERNEL_DIR) -name "*.S")$/;"	m
KERNEL_SIZE	tools/hh/mmu.h	11;"	d
KEY_STATE_EMPTY	game/lib/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon9	file:
KEY_STATE_EMPTY	kernel/device/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon5	file:
KEY_STATE_PRESS	game/lib/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon9	file:
KEY_STATE_PRESS	kernel/device/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon5	file:
KEY_STATE_RELEASE	game/lib/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon9	file:
KEY_STATE_RELEASE	kernel/device/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon5	file:
KEY_STATE_WAIT_RELEASE	game/lib/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon9	file:
KEY_STATE_WAIT_RELEASE	kernel/device/keyboard.c	/^enum {KEY_STATE_EMPTY, KEY_STATE_WAIT_RELEASE, KEY_STATE_RELEASE, KEY_STATE_PRESS};$/;"	e	enum:__anon5	file:
K_A	game/inc/scan_code.h	32;"	d
K_A	kernel/inc/device/scan_code.h	32;"	d
K_B	game/inc/scan_code.h	52;"	d
K_B	kernel/inc/device/scan_code.h	52;"	d
K_BACKSLASH	game/inc/scan_code.h	46;"	d
K_BACKSLASH	kernel/inc/device/scan_code.h	46;"	d
K_BACKSPACE	game/inc/scan_code.h	15;"	d
K_BACKSPACE	kernel/inc/device/scan_code.h	15;"	d
K_C	game/inc/scan_code.h	49;"	d
K_C	kernel/inc/device/scan_code.h	49;"	d
K_CAPS	game/inc/scan_code.h	62;"	d
K_CAPS	kernel/inc/device/scan_code.h	62;"	d
K_COMMA	game/inc/scan_code.h	55;"	d
K_COMMA	kernel/inc/device/scan_code.h	55;"	d
K_D	game/inc/scan_code.h	35;"	d
K_D	kernel/inc/device/scan_code.h	35;"	d
K_DOT	game/inc/scan_code.h	56;"	d
K_DOT	kernel/inc/device/scan_code.h	56;"	d
K_DOWN	game/inc/scan_code.h	86;"	d
K_DOWN	kernel/inc/device/scan_code.h	86;"	d
K_E	game/inc/scan_code.h	20;"	d
K_E	kernel/inc/device/scan_code.h	20;"	d
K_ENTER	game/inc/scan_code.h	30;"	d
K_ENTER	kernel/inc/device/scan_code.h	30;"	d
K_ERROR	game/inc/scan_code.h	1;"	d
K_ERROR	kernel/inc/device/scan_code.h	1;"	d
K_ESC	game/inc/scan_code.h	2;"	d
K_ESC	kernel/inc/device/scan_code.h	2;"	d
K_F	game/inc/scan_code.h	36;"	d
K_F	kernel/inc/device/scan_code.h	36;"	d
K_F1	game/inc/scan_code.h	63;"	d
K_F1	kernel/inc/device/scan_code.h	63;"	d
K_F10	game/inc/scan_code.h	73;"	d
K_F10	kernel/inc/device/scan_code.h	73;"	d
K_F2	game/inc/scan_code.h	64;"	d
K_F2	kernel/inc/device/scan_code.h	64;"	d
K_F3	game/inc/scan_code.h	65;"	d
K_F3	kernel/inc/device/scan_code.h	65;"	d
K_F4	game/inc/scan_code.h	66;"	d
K_F4	kernel/inc/device/scan_code.h	66;"	d
K_F5	game/inc/scan_code.h	67;"	d
K_F5	kernel/inc/device/scan_code.h	67;"	d
K_F6	game/inc/scan_code.h	69;"	d
K_F6	kernel/inc/device/scan_code.h	69;"	d
K_F7	game/inc/scan_code.h	70;"	d
K_F7	kernel/inc/device/scan_code.h	70;"	d
K_F8	game/inc/scan_code.h	71;"	d
K_F8	kernel/inc/device/scan_code.h	71;"	d
K_F9	game/inc/scan_code.h	72;"	d
K_F9	kernel/inc/device/scan_code.h	72;"	d
K_G	game/inc/scan_code.h	37;"	d
K_G	kernel/inc/device/scan_code.h	37;"	d
K_H	game/inc/scan_code.h	38;"	d
K_H	kernel/inc/device/scan_code.h	38;"	d
K_I	game/inc/scan_code.h	25;"	d
K_I	kernel/inc/device/scan_code.h	25;"	d
K_J	game/inc/scan_code.h	39;"	d
K_J	kernel/inc/device/scan_code.h	39;"	d
K_K	game/inc/scan_code.h	40;"	d
K_K	kernel/inc/device/scan_code.h	40;"	d
K_L	game/inc/scan_code.h	41;"	d
K_L	kernel/inc/device/scan_code.h	41;"	d
K_LEFT	game/inc/scan_code.h	80;"	d
K_LEFT	kernel/inc/device/scan_code.h	80;"	d
K_L_ALT	game/inc/scan_code.h	60;"	d
K_L_ALT	kernel/inc/device/scan_code.h	60;"	d
K_L_BRACKET	game/inc/scan_code.h	28;"	d
K_L_BRACKET	kernel/inc/device/scan_code.h	28;"	d
K_L_CTRL	game/inc/scan_code.h	31;"	d
K_L_CTRL	kernel/inc/device/scan_code.h	31;"	d
K_L_SHIFT	game/inc/scan_code.h	45;"	d
K_L_SHIFT	kernel/inc/device/scan_code.h	45;"	d
K_M	game/inc/scan_code.h	54;"	d
K_M	kernel/inc/device/scan_code.h	54;"	d
K_N	game/inc/scan_code.h	53;"	d
K_N	kernel/inc/device/scan_code.h	53;"	d
K_NUMLOCK	game/inc/scan_code.h	74;"	d
K_NUMLOCK	kernel/inc/device/scan_code.h	74;"	d
K_O	game/inc/scan_code.h	26;"	d
K_O	kernel/inc/device/scan_code.h	26;"	d
K_P	game/inc/scan_code.h	27;"	d
K_P	kernel/inc/device/scan_code.h	27;"	d
K_PAGEDOWN	game/inc/scan_code.h	87;"	d
K_PAGEDOWN	kernel/inc/device/scan_code.h	87;"	d
K_PAGEUP	game/inc/scan_code.h	78;"	d
K_PAGEUP	kernel/inc/device/scan_code.h	78;"	d
K_Q	game/inc/scan_code.h	18;"	d
K_Q	kernel/inc/device/scan_code.h	18;"	d
K_QUOTE	game/inc/scan_code.h	43;"	d
K_QUOTE	kernel/inc/device/scan_code.h	43;"	d
K_R	game/inc/scan_code.h	21;"	d
K_R	kernel/inc/device/scan_code.h	21;"	d
K_RIGHT	game/inc/scan_code.h	82;"	d
K_RIGHT	kernel/inc/device/scan_code.h	82;"	d
K_R_0	game/inc/scan_code.h	88;"	d
K_R_0	kernel/inc/device/scan_code.h	88;"	d
K_R_1	game/inc/scan_code.h	84;"	d
K_R_1	kernel/inc/device/scan_code.h	84;"	d
K_R_5	game/inc/scan_code.h	81;"	d
K_R_5	kernel/inc/device/scan_code.h	81;"	d
K_R_7	game/inc/scan_code.h	76;"	d
K_R_7	kernel/inc/device/scan_code.h	76;"	d
K_R_ALT	game/inc/scan_code.h	90;"	d
K_R_ALT	kernel/inc/device/scan_code.h	90;"	d
K_R_BRACKET	game/inc/scan_code.h	29;"	d
K_R_BRACKET	kernel/inc/device/scan_code.h	29;"	d
K_R_DOT	game/inc/scan_code.h	89;"	d
K_R_DOT	kernel/inc/device/scan_code.h	89;"	d
K_R_MINUS	game/inc/scan_code.h	79;"	d
K_R_MINUS	kernel/inc/device/scan_code.h	79;"	d
K_R_PLUS	game/inc/scan_code.h	83;"	d
K_R_PLUS	kernel/inc/device/scan_code.h	83;"	d
K_R_SHIFT	game/inc/scan_code.h	58;"	d
K_R_SHIFT	kernel/inc/device/scan_code.h	58;"	d
K_R_STAR	game/inc/scan_code.h	59;"	d
K_R_STAR	kernel/inc/device/scan_code.h	59;"	d
K_S	game/inc/scan_code.h	33;"	d
K_S	kernel/inc/device/scan_code.h	33;"	d
K_SCROLL	game/inc/scan_code.h	75;"	d
K_SCROLL	kernel/inc/device/scan_code.h	75;"	d
K_SEMICOLON	game/inc/scan_code.h	42;"	d
K_SEMICOLON	kernel/inc/device/scan_code.h	42;"	d
K_SLASH	game/inc/scan_code.h	57;"	d
K_SLASH	kernel/inc/device/scan_code.h	57;"	d
K_SPACE	game/inc/scan_code.h	61;"	d
K_SPACE	kernel/inc/device/scan_code.h	61;"	d
K_T	game/inc/scan_code.h	22;"	d
K_T	kernel/inc/device/scan_code.h	22;"	d
K_TAB	game/inc/scan_code.h	16;"	d
K_TAB	kernel/inc/device/scan_code.h	16;"	d
K_TILDE	game/inc/scan_code.h	44;"	d
K_TILDE	kernel/inc/device/scan_code.h	44;"	d
K_U	game/inc/scan_code.h	24;"	d
K_U	kernel/inc/device/scan_code.h	24;"	d
K_UP	game/inc/scan_code.h	77;"	d
K_UP	kernel/inc/device/scan_code.h	77;"	d
K_UP_0	game/inc/scan_code.h	12;"	d
K_UP_0	kernel/inc/device/scan_code.h	12;"	d
K_UP_1	game/inc/scan_code.h	3;"	d
K_UP_1	kernel/inc/device/scan_code.h	3;"	d
K_UP_2	game/inc/scan_code.h	4;"	d
K_UP_2	kernel/inc/device/scan_code.h	4;"	d
K_UP_3	game/inc/scan_code.h	5;"	d
K_UP_3	kernel/inc/device/scan_code.h	5;"	d
K_UP_4	game/inc/scan_code.h	6;"	d
K_UP_4	kernel/inc/device/scan_code.h	6;"	d
K_UP_5	game/inc/scan_code.h	7;"	d
K_UP_5	kernel/inc/device/scan_code.h	7;"	d
K_UP_6	game/inc/scan_code.h	8;"	d
K_UP_6	kernel/inc/device/scan_code.h	8;"	d
K_UP_7	game/inc/scan_code.h	9;"	d
K_UP_7	kernel/inc/device/scan_code.h	9;"	d
K_UP_8	game/inc/scan_code.h	10;"	d
K_UP_8	kernel/inc/device/scan_code.h	10;"	d
K_UP_9	game/inc/scan_code.h	11;"	d
K_UP_9	kernel/inc/device/scan_code.h	11;"	d
K_UP_MINUS	game/inc/scan_code.h	13;"	d
K_UP_MINUS	kernel/inc/device/scan_code.h	13;"	d
K_UP_PLUS	game/inc/scan_code.h	14;"	d
K_UP_PLUS	kernel/inc/device/scan_code.h	14;"	d
K_V	game/inc/scan_code.h	50;"	d
K_V	kernel/inc/device/scan_code.h	50;"	d
K_W	game/inc/scan_code.h	19;"	d
K_W	kernel/inc/device/scan_code.h	19;"	d
K_X	game/inc/scan_code.h	48;"	d
K_X	kernel/inc/device/scan_code.h	48;"	d
K_Y	game/inc/scan_code.h	23;"	d
K_Y	kernel/inc/device/scan_code.h	23;"	d
K_Z	game/inc/scan_code.h	47;"	d
K_Z	kernel/inc/device/scan_code.h	47;"	d
LD	Makefile	/^LD      := ld$/;"	m
LIB_C	Makefile	/^LIB_C := $(wildcard $(LIB_DIR)\/*.c)$/;"	m
LIB_DIR	Makefile	/^LIB_DIR        := lib$/;"	m
LIB_O	Makefile	/^LIB_O := $(LIB_C:%.c=$(OBJ_DIR)\/%.o)$/;"	m
LS_HEIGHT	game/inc/video.h	13;"	d
LS_HEIGHT	kernel/inc/device/video.h	15;"	d
LS_WIDTH	game/inc/video.h	12;"	d
LS_WIDTH	kernel/inc/device/video.h	14;"	d
LS_WIDTH_SIZE	game/inc/video.h	14;"	d
LS_WIDTH_SIZE	kernel/inc/device/video.h	16;"	d
MAX	boot/inc/types.h	49;"	d
MAX	game/inc/types.h	49;"	d
MAX	kernel/inc/types.h	49;"	d
MAXMEM	tools/hh/mmu.h	10;"	d
MIN	boot/inc/types.h	43;"	d
MIN	game/inc/types.h	43;"	d
MIN	kernel/inc/types.h	43;"	d
ModeInfoBlock	kernel/inc/device/video_mode.h	/^struct ModeInfoBlock {$/;"	s
ModeInfoBlock::VBE_FAR	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::Wchar	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::Xres	kernel/inc/device/video_mode.h	/^	uint16_t Xres, Yres;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::Ychar	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::Yres	kernel/inc/device/video_mode.h	/^	uint16_t Xres, Yres;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::attributes	kernel/inc/device/video_mode.h	/^	uint16_t attributes;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::bank_size	kernel/inc/device/video_mode.h	/^	uint8_t memory_model, bank_size, image_pages;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::banks	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::blue_mask	kernel/inc/device/video_mode.h	/^	uint8_t blue_mask, blue_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::blue_position	kernel/inc/device/video_mode.h	/^	uint8_t blue_mask, blue_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::bpp	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::directcolor_attributes	kernel/inc/device/video_mode.h	/^	uint8_t directcolor_attributes;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::granularity	kernel/inc/device/video_mode.h	/^	uint16_t granularity;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::green_mask	kernel/inc/device/video_mode.h	/^	uint8_t green_mask, green_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::green_position	kernel/inc/device/video_mode.h	/^	uint8_t green_mask, green_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::image_pages	kernel/inc/device/video_mode.h	/^	uint8_t memory_model, bank_size, image_pages;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::memory_model	kernel/inc/device/video_mode.h	/^	uint8_t memory_model, bank_size, image_pages;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::physbase	kernel/inc/device/video_mode.h	/^	uint32_t physbase;  \/\/ your LFB (Linear Framebuffer) address ;)$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::pitch	kernel/inc/device/video_mode.h	/^	uint16_t pitch; \/\/ bytes per scanline$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::planes	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::realFctPtr	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::red_mask	kernel/inc/device/video_mode.h	/^	uint8_t red_mask, red_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::red_position	kernel/inc/device/video_mode.h	/^	uint8_t red_mask, red_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::reserved0	kernel/inc/device/video_mode.h	/^	uint8_t reserved0;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::reserved1	kernel/inc/device/video_mode.h	/^	uint32_t reserved1;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::reserved2	kernel/inc/device/video_mode.h	/^	uint16_t reserved2;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::rsv_mask	kernel/inc/device/video_mode.h	/^	uint8_t rsv_mask, rsv_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::rsv_position	kernel/inc/device/video_mode.h	/^	uint8_t rsv_mask, rsv_position;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::segmentA	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::segmentB	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::winA	kernel/inc/device/video_mode.h	/^    uint8_t winA,winB;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::winB	kernel/inc/device/video_mode.h	/^    uint8_t winA,winB;$/;"	m	struct:ModeInfoBlock	access:public
ModeInfoBlock::winsize	kernel/inc/device/video_mode.h	/^	uint16_t winsize;$/;"	m	struct:ModeInfoBlock	access:public
NPDENTRIES	boot/inc/mmu.h	45;"	d
NPDENTRIES	kernel/inc/mmu.h	45;"	d
NPTENTRIES	boot/inc/mmu.h	46;"	d
NPTENTRIES	kernel/inc/mmu.h	46;"	d
NR_BULLET	game/src/effect.c	9;"	d	file:
NR_ENEMY	game/src/effect.c	8;"	d	file:
NR_HARD_INTR	kernel/irq/irq_handle.c	5;"	d	file:
NR_IRQ	kernel/irq/idt.c	7;"	d	file:
NR_IRQ_HANDLE	kernel/irq/irq_handle.c	4;"	d	file:
NR_KEYS	game/lib/keyboard.c	6;"	d	file:
NR_KEYS	kernel/device/keyboard.c	5;"	d	file:
NR_PALETTE_ENTRY	cache/palette.c	10;"	d	file:
NR_SEGMENTS	boot/inc/mmu.h	140;"	d
NR_SEGMENTS	kernel/inc/mmu.h	140;"	d
NR_SEGMENTS	tools/hh/mmu.h	83;"	d
NULL	boot/inc/types.h	5;"	d
NULL	game/inc/types.h	5;"	d
NULL	kernel/inc/types.h	5;"	d
OBJCOPY	Makefile	/^OBJCOPY := objcopy$/;"	m
OBJ_BOOT_DIR	Makefile	/^OBJ_BOOT_DIR   := $(OBJ_DIR)\/$(BOOT_DIR)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR        := obj$/;"	m
OBJ_GAME_DIR	Makefile	/^OBJ_GAME_DIR   := $(OBJ_DIR)\/$(GAME_DIR)$/;"	m
OBJ_KERNEL_DIR	Makefile	/^OBJ_KERNEL_DIR := $(OBJ_DIR)\/$(KERNEL_DIR)$/;"	m
OBJ_LIB_DIR	Makefile	/^OBJ_LIB_DIR    := $(OBJ_DIR)\/$(LIB_DIR)$/;"	m
OemStringPtr	kernel/inc/device/video_mode.h	/^	uint16_t OemStringPtr[2];            \/\/ isa vbeFarPtr$/;"	m	struct:VbeInfoBlock	access:public
PDX	boot/inc/mmu.h	33;"	d
PDX	kernel/inc/mmu.h	33;"	d
PDXSHIFT	boot/inc/mmu.h	55;"	d
PDXSHIFT	kernel/inc/mmu.h	55;"	d
PGADDR	boot/inc/mmu.h	42;"	d
PGADDR	kernel/inc/mmu.h	42;"	d
PGNUM	boot/inc/mmu.h	30;"	d
PGNUM	kernel/inc/mmu.h	30;"	d
PGOFF	boot/inc/mmu.h	39;"	d
PGOFF	kernel/inc/mmu.h	39;"	d
PGSHIFT	boot/inc/mmu.h	49;"	d
PGSHIFT	kernel/inc/mmu.h	49;"	d
PGSIZE	boot/inc/mmu.h	48;"	d
PGSIZE	kernel/inc/mmu.h	48;"	d
PIT_FREQUENCE	kernel/device/timer.c	6;"	d	file:
PORT	kernel/lib/serial.c	3;"	d	file:
PORT_CH_0	kernel/device/timer.c	4;"	d	file:
PORT_CMD	kernel/device/timer.c	5;"	d	file:
PORT_PIC_MASTER	kernel/irq/i8259.c	3;"	d	file:
PORT_PIC_SLAVE	kernel/irq/i8259.c	4;"	d	file:
PROGRAM	Makefile	/^PROGRAM := program.bin$/;"	m
PTE_A	boot/inc/mmu.h	63;"	d
PTE_A	kernel/inc/mmu.h	63;"	d
PTE_ADDR	boot/inc/mmu.h	76;"	d
PTE_ADDR	kernel/inc/mmu.h	76;"	d
PTE_AVAIL	boot/inc/mmu.h	70;"	d
PTE_AVAIL	kernel/inc/mmu.h	70;"	d
PTE_D	boot/inc/mmu.h	64;"	d
PTE_D	kernel/inc/mmu.h	64;"	d
PTE_G	boot/inc/mmu.h	66;"	d
PTE_G	kernel/inc/mmu.h	66;"	d
PTE_P	boot/inc/mmu.h	58;"	d
PTE_P	kernel/inc/mmu.h	58;"	d
PTE_PCD	boot/inc/mmu.h	62;"	d
PTE_PCD	kernel/inc/mmu.h	62;"	d
PTE_PS	boot/inc/mmu.h	65;"	d
PTE_PS	kernel/inc/mmu.h	65;"	d
PTE_PWT	boot/inc/mmu.h	61;"	d
PTE_PWT	kernel/inc/mmu.h	61;"	d
PTE_SYSCALL	boot/inc/mmu.h	73;"	d
PTE_SYSCALL	kernel/inc/mmu.h	73;"	d
PTE_U	boot/inc/mmu.h	60;"	d
PTE_U	kernel/inc/mmu.h	60;"	d
PTE_W	boot/inc/mmu.h	59;"	d
PTE_W	kernel/inc/mmu.h	59;"	d
PTSHIFT	boot/inc/mmu.h	52;"	d
PTSHIFT	kernel/inc/mmu.h	52;"	d
PTSIZE	boot/inc/mmu.h	51;"	d
PTSIZE	kernel/inc/mmu.h	51;"	d
PTX	boot/inc/mmu.h	36;"	d
PTX	kernel/inc/mmu.h	36;"	d
PTXSHIFT	boot/inc/mmu.h	54;"	d
PTXSHIFT	kernel/inc/mmu.h	54;"	d
Pixels	game/inc/video.h	/^union Pixels {$/;"	u
Pixels	kernel/inc/device/video.h	/^union Pixels {$/;"	u
Pixels::RGB_array	game/inc/video.h	/^	uint8_t RGB_array[3];$/;"	m	union:Pixels	access:public
Pixels::RGB_array	kernel/inc/device/video.h	/^	uint8_t RGB_array[3];$/;"	m	union:Pixels	access:public
Pixels::__anon10::blue	game/inc/video.h	/^		uint8_t blue;$/;"	m	struct:Pixels::__anon10	access:public
Pixels::__anon10::green	game/inc/video.h	/^		uint8_t green;$/;"	m	struct:Pixels::__anon10	access:public
Pixels::__anon10::red	game/inc/video.h	/^		uint8_t red;$/;"	m	struct:Pixels::__anon10	access:public
Pixels::__anon2::blue	kernel/inc/device/video.h	/^		uint8_t blue;$/;"	m	struct:Pixels::__anon2	access:public
Pixels::__anon2::green	kernel/inc/device/video.h	/^		uint8_t green;$/;"	m	struct:Pixels::__anon2	access:public
Pixels::__anon2::red	kernel/inc/device/video.h	/^		uint8_t red;$/;"	m	struct:Pixels::__anon2	access:public
Proghdr	boot/inc/elf.h	/^struct Proghdr {$/;"	s
Proghdr	kernel/inc/elf.h	/^struct Proghdr {$/;"	s
Proghdr::p_align	boot/inc/elf.h	/^	uint32_t p_align;$/;"	m	struct:Proghdr	access:public
Proghdr::p_align	kernel/inc/elf.h	/^	uint32_t p_align;$/;"	m	struct:Proghdr	access:public
Proghdr::p_filesz	boot/inc/elf.h	/^	uint32_t p_filesz;$/;"	m	struct:Proghdr	access:public
Proghdr::p_filesz	kernel/inc/elf.h	/^	uint32_t p_filesz;$/;"	m	struct:Proghdr	access:public
Proghdr::p_flags	boot/inc/elf.h	/^	uint32_t p_flags;$/;"	m	struct:Proghdr	access:public
Proghdr::p_flags	kernel/inc/elf.h	/^	uint32_t p_flags;$/;"	m	struct:Proghdr	access:public
Proghdr::p_memsz	boot/inc/elf.h	/^	uint32_t p_memsz;$/;"	m	struct:Proghdr	access:public
Proghdr::p_memsz	kernel/inc/elf.h	/^	uint32_t p_memsz;$/;"	m	struct:Proghdr	access:public
Proghdr::p_offset	boot/inc/elf.h	/^	uint32_t p_offset;$/;"	m	struct:Proghdr	access:public
Proghdr::p_offset	kernel/inc/elf.h	/^	uint32_t p_offset;$/;"	m	struct:Proghdr	access:public
Proghdr::p_pa	boot/inc/elf.h	/^	uint32_t p_pa;$/;"	m	struct:Proghdr	access:public
Proghdr::p_pa	kernel/inc/elf.h	/^	uint32_t p_pa;$/;"	m	struct:Proghdr	access:public
Proghdr::p_type	boot/inc/elf.h	/^	uint32_t p_type;$/;"	m	struct:Proghdr	access:public
Proghdr::p_type	kernel/inc/elf.h	/^	uint32_t p_type;$/;"	m	struct:Proghdr	access:public
Proghdr::p_va	boot/inc/elf.h	/^	uint32_t p_va;$/;"	m	struct:Proghdr	access:public
Proghdr::p_va	kernel/inc/elf.h	/^	uint32_t p_va;$/;"	m	struct:Proghdr	access:public
Pseudodesc	boot/inc/mmu.h	/^struct Pseudodesc {$/;"	s
Pseudodesc	kernel/inc/mmu.h	/^struct Pseudodesc {$/;"	s
Pseudodesc	tools/hh/mmu.h	/^struct Pseudodesc {$/;"	s
Pseudodesc::pd_base	boot/inc/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
Pseudodesc::pd_base	kernel/inc/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
Pseudodesc::pd_base	tools/hh/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
Pseudodesc::pd_lim	boot/inc/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
Pseudodesc::pd_lim	kernel/inc/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
Pseudodesc::pd_lim	tools/hh/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
QEMU	Makefile	/^QEMU    := qemu-system-i386$/;"	m
QEMU_DEBUG_OPTIONS	Makefile	/^QEMU_DEBUG_OPTIONS := -S #启动不执行$/;"	m
QEMU_OPTIONS	Makefile	/^QEMU_OPTIONS := -serial stdio #以标准输入输为串口(COM1)$/;"	m
RGB_array	game/inc/video.h	/^	uint8_t RGB_array[3];$/;"	m	union:Pixels	access:public
RGB_array	kernel/inc/device/video.h	/^	uint8_t RGB_array[3];$/;"	m	union:Pixels	access:public
ROUNDDOWN	boot/inc/types.h	58;"	d
ROUNDDOWN	game/inc/types.h	58;"	d
ROUNDDOWN	kernel/inc/types.h	58;"	d
ROUNDUP	boot/inc/types.h	64;"	d
ROUNDUP	game/inc/types.h	64;"	d
ROUNDUP	kernel/inc/types.h	64;"	d
SCR_DEPTH	game/inc/video.h	8;"	d
SCR_DEPTH	kernel/inc/device/video.h	8;"	d
SCR_HEIGHT	game/inc/video.h	7;"	d
SCR_HEIGHT	kernel/inc/device/video.h	7;"	d
SCR_SIZE	game/inc/video.h	10;"	d
SCR_SIZE	kernel/inc/device/video.h	10;"	d
SCR_WIDTH	game/inc/video.h	6;"	d
SCR_WIDTH	kernel/inc/device/video.h	6;"	d
SCR_WIDTH_SIZE	game/inc/video.h	9;"	d
SCR_WIDTH_SIZE	kernel/inc/device/video.h	9;"	d
SECTSIZE	boot/boot.c	5;"	d	file:
SECTSIZE	kernel/main.c	8;"	d	file:
SEG	boot/inc/mmu.h	164;"	d
SEG	boot/inc/mmu.h	195;"	d
SEG	kernel/inc/mmu.h	164;"	d
SEG	kernel/inc/mmu.h	195;"	d
SEG	tools/hh/mmu.h	/^SEG(SegDesc *ptr, uint32_t type,uint32_t base, uint32_t limit, uint32_t dpl){$/;"	f	signature:(SegDesc *ptr, uint32_t type,uint32_t base, uint32_t limit, uint32_t dpl)
SEG	tools/hh/mmu.h	107;"	d
SEG16	boot/inc/mmu.h	199;"	d
SEG16	kernel/inc/mmu.h	199;"	d
SEG16	tools/hh/mmu.h	/^SEG16(SegDesc *ptr, uint32_t type,uint32_t base, uint32_t limit, uint32_t dpl){$/;"	f	signature:(SegDesc *ptr, uint32_t type,uint32_t base, uint32_t limit, uint32_t dpl)
SEG_32BIT	boot/inc/mmu.h	129;"	d
SEG_32BIT	kernel/inc/mmu.h	129;"	d
SEG_4KB_GRANULARITY	boot/inc/mmu.h	130;"	d
SEG_4KB_GRANULARITY	kernel/inc/mmu.h	130;"	d
SEG_CODEDATA	boot/inc/mmu.h	128;"	d
SEG_CODEDATA	kernel/inc/mmu.h	128;"	d
SEG_EXECUTABLE	boot/inc/mmu.h	138;"	d
SEG_EXECUTABLE	kernel/inc/mmu.h	138;"	d
SEG_EXECUTABLE	tools/hh/mmu.h	78;"	d
SEG_EXE_CODE	tools/hh/mmu.h	80;"	d
SEG_FAULT	boot/inc/mmu.h	193;"	d
SEG_FAULT	kernel/inc/mmu.h	193;"	d
SEG_FAULT	tools/hh/mmu.h	155;"	d
SEG_KERNEL_CODE	boot/inc/mmu.h	142;"	d
SEG_KERNEL_CODE	kernel/inc/mmu.h	142;"	d
SEG_KERNEL_CODE	tools/hh/mmu.h	84;"	d
SEG_KERNEL_DATA	boot/inc/mmu.h	143;"	d
SEG_KERNEL_DATA	kernel/inc/mmu.h	143;"	d
SEG_KERNEL_DATA	tools/hh/mmu.h	85;"	d
SEG_KERNEL_NULL	boot/inc/mmu.h	141;"	d
SEG_KERNEL_NULL	kernel/inc/mmu.h	141;"	d
SEG_NULL	boot/inc/mmu.h	161;"	d
SEG_NULL	boot/inc/mmu.h	191;"	d
SEG_NULL	kernel/inc/mmu.h	161;"	d
SEG_NULL	kernel/inc/mmu.h	191;"	d
SEG_NULL	tools/hh/mmu.h	104;"	d
SEG_NULL	tools/hh/mmu.h	153;"	d
SEG_READABLE	boot/inc/mmu.h	137;"	d
SEG_READABLE	kernel/inc/mmu.h	137;"	d
SEG_READABLE	tools/hh/mmu.h	77;"	d
SEG_RW_DATA	tools/hh/mmu.h	79;"	d
SEG_TSS	tools/hh/mmu.h	88;"	d
SEG_TSS_32BIT	boot/inc/mmu.h	131;"	d
SEG_TSS_32BIT	kernel/inc/mmu.h	131;"	d
SEG_WRITABLE	boot/inc/mmu.h	136;"	d
SEG_WRITABLE	kernel/inc/mmu.h	136;"	d
SEG_WRITABLE	tools/hh/mmu.h	76;"	d
SELECTOR_INDEX	tools/hh/mmu.h	95;"	d
SELECTOR_KERNEL	boot/inc/mmu.h	145;"	d
SELECTOR_KERNEL	kernel/inc/mmu.h	145;"	d
SELECTOR_KERNEL	tools/hh/mmu.h	92;"	d
SELECTOR_USER	boot/inc/mmu.h	146;"	d
SELECTOR_USER	kernel/inc/mmu.h	146;"	d
SELECTOR_USER	tools/hh/mmu.h	93;"	d
SEL_KEL	tools/hh/mmu.h	112;"	d
SETCALLGATE	boot/inc/mmu.h	319;"	d
SETCALLGATE	kernel/inc/mmu.h	319;"	d
SETCALLGATE	tools/hh/mmu.h	348;"	d
SETGATE	boot/inc/mmu.h	305;"	d
SETGATE	kernel/inc/mmu.h	305;"	d
SETGATE	tools/hh/mmu.h	334;"	d
STA_A	boot/inc/mmu.h	212;"	d
STA_A	kernel/inc/mmu.h	212;"	d
STA_A	tools/hh/mmu.h	210;"	d
STA_C	boot/inc/mmu.h	209;"	d
STA_C	kernel/inc/mmu.h	209;"	d
STA_C	tools/hh/mmu.h	207;"	d
STA_E	boot/inc/mmu.h	208;"	d
STA_E	kernel/inc/mmu.h	208;"	d
STA_E	tools/hh/mmu.h	206;"	d
STA_R	boot/inc/mmu.h	211;"	d
STA_R	kernel/inc/mmu.h	211;"	d
STA_R	tools/hh/mmu.h	209;"	d
STA_W	boot/inc/mmu.h	210;"	d
STA_W	kernel/inc/mmu.h	210;"	d
STA_W	tools/hh/mmu.h	208;"	d
STA_X	boot/inc/mmu.h	207;"	d
STA_X	kernel/inc/mmu.h	207;"	d
STA_X	tools/hh/mmu.h	205;"	d
STS_CG16	boot/inc/mmu.h	218;"	d
STS_CG16	kernel/inc/mmu.h	218;"	d
STS_CG16	tools/hh/mmu.h	216;"	d
STS_CG32	boot/inc/mmu.h	224;"	d
STS_CG32	kernel/inc/mmu.h	224;"	d
STS_CG32	tools/hh/mmu.h	222;"	d
STS_IG16	boot/inc/mmu.h	220;"	d
STS_IG16	kernel/inc/mmu.h	220;"	d
STS_IG16	tools/hh/mmu.h	218;"	d
STS_IG32	boot/inc/mmu.h	225;"	d
STS_IG32	kernel/inc/mmu.h	225;"	d
STS_IG32	tools/hh/mmu.h	223;"	d
STS_LDT	boot/inc/mmu.h	216;"	d
STS_LDT	kernel/inc/mmu.h	216;"	d
STS_LDT	tools/hh/mmu.h	214;"	d
STS_T16A	boot/inc/mmu.h	215;"	d
STS_T16A	kernel/inc/mmu.h	215;"	d
STS_T16A	tools/hh/mmu.h	213;"	d
STS_T16B	boot/inc/mmu.h	217;"	d
STS_T16B	kernel/inc/mmu.h	217;"	d
STS_T16B	tools/hh/mmu.h	215;"	d
STS_T32A	boot/inc/mmu.h	222;"	d
STS_T32A	kernel/inc/mmu.h	222;"	d
STS_T32A	tools/hh/mmu.h	220;"	d
STS_T32B	boot/inc/mmu.h	223;"	d
STS_T32B	kernel/inc/mmu.h	223;"	d
STS_T32B	tools/hh/mmu.h	221;"	d
STS_TG	boot/inc/mmu.h	219;"	d
STS_TG	kernel/inc/mmu.h	219;"	d
STS_TG	tools/hh/mmu.h	217;"	d
STS_TG16	boot/inc/mmu.h	221;"	d
STS_TG16	kernel/inc/mmu.h	221;"	d
STS_TG16	tools/hh/mmu.h	219;"	d
STS_TG32	boot/inc/mmu.h	226;"	d
STS_TG32	kernel/inc/mmu.h	226;"	d
STS_TG32	tools/hh/mmu.h	224;"	d
SYS_kbd	game/lib/syscall.c	/^enum {SYS_time, SYS_kbd, SYS_video};$/;"	e	enum:__anon8	file:
SYS_kbd	kernel/syscall/do_syscall.c	/^enum {SYS_time, SYS_kbd, SYS_video};$/;"	e	enum:__anon4	file:
SYS_time	game/lib/syscall.c	/^enum {SYS_time, SYS_kbd, SYS_video};$/;"	e	enum:__anon8	file:
SYS_time	kernel/syscall/do_syscall.c	/^enum {SYS_time, SYS_kbd, SYS_video};$/;"	e	enum:__anon4	file:
SYS_video	game/lib/syscall.c	/^enum {SYS_time, SYS_kbd, SYS_video};$/;"	e	enum:__anon8	file:
SYS_video	kernel/syscall/do_syscall.c	/^enum {SYS_time, SYS_kbd, SYS_video};$/;"	e	enum:__anon4	file:
Secthdr	boot/inc/elf.h	/^struct Secthdr {$/;"	s
Secthdr	kernel/inc/elf.h	/^struct Secthdr {$/;"	s
Secthdr::sh_addr	boot/inc/elf.h	/^	uint32_t sh_addr;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_addr	kernel/inc/elf.h	/^	uint32_t sh_addr;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_addralign	boot/inc/elf.h	/^	uint32_t sh_addralign;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_addralign	kernel/inc/elf.h	/^	uint32_t sh_addralign;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_entsize	boot/inc/elf.h	/^	uint32_t sh_entsize;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_entsize	kernel/inc/elf.h	/^	uint32_t sh_entsize;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_flags	boot/inc/elf.h	/^	uint32_t sh_flags;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_flags	kernel/inc/elf.h	/^	uint32_t sh_flags;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_info	boot/inc/elf.h	/^	uint32_t sh_info;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_info	kernel/inc/elf.h	/^	uint32_t sh_info;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_link	boot/inc/elf.h	/^	uint32_t sh_link;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_link	kernel/inc/elf.h	/^	uint32_t sh_link;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_name	boot/inc/elf.h	/^	uint32_t sh_name;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_name	kernel/inc/elf.h	/^	uint32_t sh_name;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_offset	boot/inc/elf.h	/^	uint32_t sh_offset;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_offset	kernel/inc/elf.h	/^	uint32_t sh_offset;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_size	boot/inc/elf.h	/^	uint32_t sh_size;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_size	kernel/inc/elf.h	/^	uint32_t sh_size;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_type	boot/inc/elf.h	/^	uint32_t sh_type;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_type	kernel/inc/elf.h	/^	uint32_t sh_type;$/;"	m	struct:Secthdr	access:public
SegDesc	tools/hh/mmu.h	/^} SegDesc;$/;"	t	typeref:struct:SegmentDescriptor
Segdesc	boot/inc/mmu.h	/^} Segdesc;$/;"	t	typeref:struct:SegmentDescriptor
Segdesc	kernel/inc/mmu.h	/^} Segdesc;$/;"	t	typeref:struct:SegmentDescriptor
SegmentDescriptor	boot/inc/mmu.h	/^typedef struct SegmentDescriptor {$/;"	s
SegmentDescriptor	kernel/inc/mmu.h	/^typedef struct SegmentDescriptor {$/;"	s
SegmentDescriptor	tools/hh/mmu.h	/^typedef struct SegmentDescriptor {$/;"	s
SegmentDescriptor::base_15_0	tools/hh/mmu.h	/^	uint32_t base_15_0           : 16;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::base_23_16	tools/hh/mmu.h	/^	uint32_t base_23_16          : 8;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::base_31_24	tools/hh/mmu.h	/^	uint32_t base_31_24          : 8;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::granularity	tools/hh/mmu.h	/^	uint32_t granularity         : 1;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::limit_15_0	tools/hh/mmu.h	/^	uint32_t limit_15_0          : 16;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::limit_19_16	tools/hh/mmu.h	/^	uint32_t limit_19_16         : 4;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::operation_size	tools/hh/mmu.h	/^	uint32_t operation_size      : 1;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::pad0	tools/hh/mmu.h	/^	uint32_t pad0                : 1;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::present	tools/hh/mmu.h	/^	uint32_t present             : 1;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::privilege_level	tools/hh/mmu.h	/^	uint32_t privilege_level     : 2;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_avl	boot/inc/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_avl	kernel/inc/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_base_15_0	boot/inc/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_base_15_0	kernel/inc/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_base_23_16	boot/inc/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_base_23_16	kernel/inc/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_base_31_24	boot/inc/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_base_31_24	kernel/inc/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_db	boot/inc/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_db	kernel/inc/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_dpl	boot/inc/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_dpl	kernel/inc/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_g	boot/inc/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_g	kernel/inc/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_lim_15_0	boot/inc/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_lim_15_0	kernel/inc/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_lim_19_16	boot/inc/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_lim_19_16	kernel/inc/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_p	boot/inc/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_p	kernel/inc/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_rsv1	boot/inc/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_rsv1	kernel/inc/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_s	boot/inc/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_s	kernel/inc/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_type	boot/inc/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::sd_type	kernel/inc/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::segment_type	tools/hh/mmu.h	/^	uint32_t segment_type        : 1;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::soft_use	tools/hh/mmu.h	/^	uint32_t soft_use            : 1;$/;"	m	struct:SegmentDescriptor	access:public
SegmentDescriptor::type	tools/hh/mmu.h	/^	uint32_t type                : 4;$/;"	m	struct:SegmentDescriptor	access:public
Surface	game/inc/video.h	/^struct Surface {$/;"	s
Surface	kernel/inc/device/video.h	/^struct Surface {$/;"	s
Surface::h	game/inc/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
Surface::h	kernel/inc/device/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
Surface::pixels	game/inc/video.h	/^	uint8_t *pixels;$/;"	m	struct:Surface	access:public
Surface::pixels	kernel/inc/device/video.h	/^	uint8_t *pixels;$/;"	m	struct:Surface	access:public
Surface::w	game/inc/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
Surface::w	kernel/inc/device/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
Surface::x	game/inc/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
Surface::x	kernel/inc/device/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
Surface::y	game/inc/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
Surface::y	kernel/inc/device/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
TEST_WORK	kernel/main.c	/^void TEST_WORK(){$/;"	f
TRAP_GATE_32	kernel/irq/idt.c	6;"	d	file:
TSS	tools/hh/mmu.h	/^}TSS;$/;"	t	typeref:struct:__anon7
Taskstate	boot/inc/mmu.h	/^} Taskstate;$/;"	t	typeref:struct:TaskstateSegment
Taskstate	kernel/inc/mmu.h	/^} Taskstate;$/;"	t	typeref:struct:TaskstateSegment
Taskstate	tools/hh/mmu.h	/^struct Taskstate {$/;"	s
Taskstate::ts_cr3	tools/hh/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:Taskstate	access:public
Taskstate::ts_cs	tools/hh/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ds	tools/hh/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_eax	tools/hh/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ebp	tools/hh/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ebx	tools/hh/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ecx	tools/hh/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_edi	tools/hh/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_edx	tools/hh/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_eflags	tools/hh/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_eip	tools/hh/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:Taskstate	access:public
Taskstate::ts_es	tools/hh/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esi	tools/hh/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp	tools/hh/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp0	tools/hh/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp1	tools/hh/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp2	tools/hh/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_fs	tools/hh/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_gs	tools/hh/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_iomb	tools/hh/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ldt	tools/hh/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_link	tools/hh/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding1	tools/hh/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding10	tools/hh/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding2	tools/hh/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding3	tools/hh/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding4	tools/hh/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding5	tools/hh/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding6	tools/hh/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding7	tools/hh/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding8	tools/hh/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding9	tools/hh/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss	tools/hh/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss0	tools/hh/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss1	tools/hh/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss2	tools/hh/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_t	tools/hh/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:Taskstate	access:public
TaskstateSegment	boot/inc/mmu.h	/^typedef struct TaskstateSegment {$/;"	s
TaskstateSegment	kernel/inc/mmu.h	/^typedef struct TaskstateSegment {$/;"	s
TaskstateSegment::ts_cr3	boot/inc/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_cr3	kernel/inc/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_cs	boot/inc/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_cs	kernel/inc/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ds	boot/inc/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ds	kernel/inc/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_eax	boot/inc/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_eax	kernel/inc/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ebp	boot/inc/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ebp	kernel/inc/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ebx	boot/inc/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ebx	kernel/inc/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ecx	boot/inc/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ecx	kernel/inc/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_edi	boot/inc/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_edi	kernel/inc/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_edx	boot/inc/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_edx	kernel/inc/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_eflags	boot/inc/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_eflags	kernel/inc/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_eip	boot/inc/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_eip	kernel/inc/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_es	boot/inc/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_es	kernel/inc/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esi	boot/inc/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esi	kernel/inc/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp	boot/inc/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp	kernel/inc/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp0	boot/inc/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp0	kernel/inc/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp1	boot/inc/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp1	kernel/inc/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp2	boot/inc/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_esp2	kernel/inc/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_fs	boot/inc/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_fs	kernel/inc/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_gs	boot/inc/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_gs	kernel/inc/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_iomb	boot/inc/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_iomb	kernel/inc/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ldt	boot/inc/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ldt	kernel/inc/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_link	boot/inc/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_link	kernel/inc/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding1	boot/inc/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding1	kernel/inc/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding10	boot/inc/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding10	kernel/inc/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding2	boot/inc/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding2	kernel/inc/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding3	boot/inc/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding3	kernel/inc/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding4	boot/inc/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding4	kernel/inc/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding5	boot/inc/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding5	kernel/inc/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding6	boot/inc/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding6	kernel/inc/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding7	boot/inc/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding7	kernel/inc/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding8	boot/inc/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding8	kernel/inc/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding9	boot/inc/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_padding9	kernel/inc/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss	boot/inc/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss	kernel/inc/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss0	boot/inc/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss0	kernel/inc/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss1	boot/inc/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss1	kernel/inc/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss2	boot/inc/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_ss2	kernel/inc/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_t	boot/inc/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:TaskstateSegment	access:public
TaskstateSegment::ts_t	kernel/inc/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:TaskstateSegment	access:public
TotalMemory	kernel/inc/device/video_mode.h	/^	uint16_t TotalMemory;             \/\/ as # of 64KB blocks$/;"	m	struct:VbeInfoBlock	access:public
TrapFrame	kernel/inc/irq.h	/^typedef struct TrapFrame {$/;"	s
TrapFrame	kernel/inc/irq.h	/^} TrapFrame;$/;"	t	typeref:struct:TrapFrame
TrapFrame	tools/hh/mmu.h	/^struct TrapFrame {$/;"	s
TrapFrame	tools/hh/mmu.h	/^typedef struct TrapFrame TrapFrame;$/;"	t	typeref:struct:TrapFrame
TrapFrame::cs	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
TrapFrame::cs	tools/hh/mmu.h	/^	uint16_t cs;$/;"	m	struct:TrapFrame	access:public
TrapFrame::ds	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
TrapFrame::eax	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::eax	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
TrapFrame::ebp	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::ebp	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
TrapFrame::ebx	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::ebx	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
TrapFrame::ecx	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::ecx	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
TrapFrame::edi	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::edi	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
TrapFrame::edx	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::edx	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
TrapFrame::eflags	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
TrapFrame::eflags	tools/hh/mmu.h	/^	uint32_t eflags; \/\/ Execution state before trap $/;"	m	struct:TrapFrame	access:public
TrapFrame::eip	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
TrapFrame::eip	tools/hh/mmu.h	/^	uint32_t eip;$/;"	m	struct:TrapFrame	access:public
TrapFrame::err	tools/hh/mmu.h	/^	uint32_t err;$/;"	m	struct:TrapFrame	access:public
TrapFrame::error_code	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
TrapFrame::es	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
TrapFrame::esi	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::esi	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
TrapFrame::esp	tools/hh/mmu.h	/^	uint32_t esp; $/;"	m	struct:TrapFrame	access:public
TrapFrame::esp_	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
TrapFrame::fs	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
TrapFrame::gs	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
TrapFrame::irq	kernel/inc/irq.h	/^	int32_t irq;$/;"	m	struct:TrapFrame	access:public
TrapFrame::irq	tools/hh/mmu.h	/^	int irq;$/;"	m	struct:TrapFrame	access:public
TrapFrame::old_esp	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
TrapFrame::padding3	tools/hh/mmu.h	/^	uint16_t padding3;$/;"	m	struct:TrapFrame	access:public
TrapFrame::padding4	tools/hh/mmu.h	/^	uint16_t padding4;$/;"	m	struct:TrapFrame	access:public
TrapFrame::ss	tools/hh/mmu.h	/^	uint16_t ss;$/;"	m	struct:TrapFrame	access:public
USER_SIZE	tools/hh/mmu.h	12;"	d
USER_STACK_SIZE	tools/hh/mmu.h	14;"	d
USER_STACK_TOP	tools/hh/mmu.h	13;"	d
VBE_FAR	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
VGA_DAC_DATA	cache/palette.c	7;"	d	file:
VGA_DAC_READ_INDEX	cache/palette.c	5;"	d	file:
VGA_DAC_WRITE_INDEX	cache/palette.c	6;"	d	file:
VbeInfoBlock	kernel/inc/device/video_mode.h	/^struct VbeInfoBlock {$/;"	s
VbeInfoBlock::Capabilities	kernel/inc/device/video_mode.h	/^	uint8_t Capabilities[4];$/;"	m	struct:VbeInfoBlock	access:public
VbeInfoBlock::OemStringPtr	kernel/inc/device/video_mode.h	/^	uint16_t OemStringPtr[2];            \/\/ isa vbeFarPtr$/;"	m	struct:VbeInfoBlock	access:public
VbeInfoBlock::TotalMemory	kernel/inc/device/video_mode.h	/^	uint16_t TotalMemory;             \/\/ as # of 64KB blocks$/;"	m	struct:VbeInfoBlock	access:public
VbeInfoBlock::VbeSignature	kernel/inc/device/video_mode.h	/^	char VbeSignature[4];             \/\/ == "VESA"$/;"	m	struct:VbeInfoBlock	access:public
VbeInfoBlock::VbeVersion	kernel/inc/device/video_mode.h	/^	uint16_t VbeVersion;                 \/\/ == 0x0300 for VBE 3.0$/;"	m	struct:VbeInfoBlock	access:public
VbeInfoBlock::VideoModePtr	kernel/inc/device/video_mode.h	/^	uint16_t VideoModePtr[2];         \/\/ isa vbeFarPtr$/;"	m	struct:VbeInfoBlock	access:public
VbeSignature	kernel/inc/device/video_mode.h	/^	char VbeSignature[4];             \/\/ == "VESA"$/;"	m	struct:VbeInfoBlock	access:public
VbeVersion	kernel/inc/device/video_mode.h	/^	uint16_t VbeVersion;                 \/\/ == 0x0300 for VBE 3.0$/;"	m	struct:VbeInfoBlock	access:public
VideoModePtr	kernel/inc/device/video_mode.h	/^	uint16_t VideoModePtr[2];         \/\/ isa vbeFarPtr$/;"	m	struct:VbeInfoBlock	access:public
Wchar	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
Xres	kernel/inc/device/video_mode.h	/^	uint16_t Xres, Yres;$/;"	m	struct:ModeInfoBlock	access:public
Ychar	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
Yres	kernel/inc/device/video_mode.h	/^	uint16_t Xres, Yres;$/;"	m	struct:ModeInfoBlock	access:public
__ASSERT_H__	kernel/inc/assert.h	2;"	d
__COMMON__	game/inc/common.h	2;"	d
__COMMON__	kernel/inc/common.h	2;"	d
__ELF_H__	boot/inc/elf.h	2;"	d
__ELF_H__	kernel/inc/elf.h	2;"	d
__IRQ_H__	kernel/inc/irq.h	2;"	d
__KEYBOARD_H__	game/inc/keyboard.h	2;"	d
__KEYBOARD_H__	kernel/inc/device/keyboard.h	2;"	d
__MMU_H__	boot/inc/mmu.h	2;"	d
__MMU_H__	kernel/inc/mmu.h	2;"	d
__PALETTE_H__	kernel/inc/device/palette.h	2;"	d
__STDARG_H__	kernel/inc/stdarg.h	4;"	d
__STDIO_H__	kernel/inc/stdio.h	2;"	d
__STRING_H__	game/inc/string.h	2;"	d
__STRING_H__	kernel/inc/string.h	2;"	d
__SYSCALL_H__	game/inc/syscall.h	2;"	d
__TYPES_H__	boot/inc/types.h	2;"	d
__TYPES_H__	game/inc/types.h	2;"	d
__TYPES_H__	kernel/inc/types.h	2;"	d
__VIDEO_H__	game/inc/video.h	2;"	d
__VIDEO_H__	kernel/inc/device/video.h	2;"	d
__X86_H__	boot/inc/x86.h	2;"	d
__X86_H__	game/inc/x86.h	2;"	d
__X86_H__	kernel/inc/x86.h	2;"	d
__anon7::dontcare	tools/hh/mmu.h	/^	char dontcare[88];$/;"	m	struct:__anon7	access:public
__anon7::esp0	tools/hh/mmu.h	/^	uint32_t esp0;         \/\/ Ring 0 Stack pointer and segment selector$/;"	m	struct:__anon7	access:public
__anon7::link	tools/hh/mmu.h	/^	uint32_t link;         \/\/ old ts selector$/;"	m	struct:__anon7	access:public
__anon7::ss0	tools/hh/mmu.h	/^	uint32_t ss0;          \/\/ after an increase in privilege level$/;"	m	struct:__anon7	access:public
abort	kernel/inc/assert.h	/^int abort(const char *, int);$/;"	p	signature:(const char *, int)
abort	kernel/lib/abort.c	/^int abort(const char* filename, int line) {$/;"	f	signature:(const char* filename, int line)
access_mode	kernel/device/timer.c	/^		uint8_t access_mode  : 2;$/;"	m	struct:CmdByte::__anon6	file:	access:public
add_irq_handle	kernel/irq/irq_handle.c	/^void add_irq_handle(int irq, void (*func)(void) ) {$/;"	f	signature:(int irq, void (*func)(void) )
add_irq_handle	kernel/main.c	/^void add_irq_handle(int,void (*)(void));$/;"	p	file:	signature:(int,void (*)(void))
asm_do_irq	kernel/irq/do_irq.S	/^asm_do_irq:$/;"	l
assert	kernel/inc/assert.h	15;"	d
attributes	kernel/inc/device/video_mode.h	/^	uint16_t attributes;$/;"	m	struct:ModeInfoBlock	access:public
bank_size	kernel/inc/device/video_mode.h	/^	uint8_t memory_model, bank_size, image_pages;$/;"	m	struct:ModeInfoBlock	access:public
banks	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
base_15_0	tools/hh/mmu.h	/^	uint32_t base_15_0           : 16;$/;"	m	struct:SegmentDescriptor	access:public
base_23_16	tools/hh/mmu.h	/^	uint32_t base_23_16          : 8;$/;"	m	struct:SegmentDescriptor	access:public
base_31_24	tools/hh/mmu.h	/^	uint32_t base_31_24          : 8;$/;"	m	struct:SegmentDescriptor	access:public
blue	game/inc/video.h	/^		uint8_t blue;$/;"	m	struct:Pixels::__anon10	access:public
blue	kernel/inc/device/video.h	/^		uint8_t blue;$/;"	m	struct:Pixels::__anon2	access:public
blue_mask	kernel/inc/device/video_mode.h	/^	uint8_t blue_mask, blue_position;$/;"	m	struct:ModeInfoBlock	access:public
blue_position	kernel/inc/device/video_mode.h	/^	uint8_t blue_mask, blue_position;$/;"	m	struct:ModeInfoBlock	access:public
bool	boot/inc/types.h	/^typedef _Bool bool;$/;"	t
bool	game/inc/types.h	/^typedef _Bool bool;$/;"	t
bool	kernel/inc/types.h	/^typedef _Bool bool;$/;"	t
bootmain	boot/boot.c	/^int bootmain(void)$/;"	f	signature:(void)
bpp	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
breakpoint	boot/inc/x86.h	/^breakpoint(void)$/;"	f	signature:(void)
breakpoint	boot/inc/x86.h	/^static __inline void breakpoint(void) __attribute__((always_inline));$/;"	p	signature:(void)
breakpoint	game/inc/x86.h	/^breakpoint(void)$/;"	f	signature:(void)
breakpoint	game/inc/x86.h	/^static __inline void breakpoint(void) __attribute__((always_inline));$/;"	p	signature:(void)
breakpoint	kernel/inc/x86.h	/^breakpoint(void)$/;"	f	signature:(void)
breakpoint	kernel/inc/x86.h	/^static __inline void breakpoint(void) __attribute__((always_inline));$/;"	p	signature:(void)
bullet	game/src/effect.c	/^} *bullet_head, *bullet_avail, bullet[NR_BULLET];$/;"	v	typeref:struct:Bullet
bullet_avail	game/src/effect.c	/^} *bullet_head, *bullet_avail, bullet[NR_BULLET];$/;"	v	typeref:struct:Bullet
bullet_head	game/src/effect.c	/^} *bullet_head, *bullet_avail, bullet[NR_BULLET];$/;"	v	typeref:struct:Bullet
channel	kernel/device/timer.c	/^		uint8_t channel      : 2;$/;"	m	struct:CmdByte::__anon6	file:	access:public
clear_buffer	game/inc/video.h	/^void clear_buffer();$/;"	p	signature:()
clear_buffer	game/lib/video.c	/^inline void clear_buffer() {$/;"	f
cli	boot/inc/x86.h	/^cli(void)$/;"	f	signature:(void)
cli	boot/inc/x86.h	/^static __inline void cli(void) __attribute__((always_inline));$/;"	p	signature:(void)
cli	game/inc/x86.h	/^cli(void)$/;"	f	signature:(void)
cli	game/inc/x86.h	/^static __inline void cli(void) __attribute__((always_inline));$/;"	p	signature:(void)
cli	kernel/inc/x86.h	/^cli(void)$/;"	f	signature:(void)
cli	kernel/inc/x86.h	/^static __inline void cli(void) __attribute__((always_inline));$/;"	p	signature:(void)
close_reborn	game/lib/keyboard.c	/^void close_reborn();$/;"	p	file:
close_reborn	game/main.c	/^void close_reborn() {$/;"	f
cpuid	boot/inc/x86.h	/^cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)$/;"	f	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cpuid	boot/inc/x86.h	/^static __inline void cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp);$/;"	p	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cpuid	game/inc/x86.h	/^cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)$/;"	f	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cpuid	game/inc/x86.h	/^static __inline void cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp);$/;"	p	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cpuid	kernel/inc/x86.h	/^cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)$/;"	f	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cpuid	kernel/inc/x86.h	/^static __inline void cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp);$/;"	p	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cs	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
cs	tools/hh/mmu.h	/^	uint16_t cs;$/;"	m	struct:TrapFrame	access:public
delete_bullet	game/src/effect.c	/^void delete_bullet(struct Bullet *bullet_p) {$/;"	f	signature:(struct Bullet *bullet_p)
delete_enemy	game/src/effect.c	/^void delete_enemy(struct Enemy *enemy_p) {$/;"	f	signature:(struct Enemy *enemy_p)
directcolor_attributes	kernel/inc/device/video_mode.h	/^	uint8_t directcolor_attributes;$/;"	m	struct:ModeInfoBlock	access:public
display_buffer	game/inc/video.h	/^void display_buffer();$/;"	p	signature:()
display_buffer	game/lib/video.c	/^inline void display_buffer() {$/;"	f
do_syscall	kernel/irq/irq_handle.c	/^void do_syscall(TrapFrame *);$/;"	p	file:	signature:(TrapFrame *)
do_syscall	kernel/syscall/do_syscall.c	/^void do_syscall(TrapFrame *tf) {$/;"	f	signature:(TrapFrame *tf)
dontcare	tools/hh/mmu.h	/^	char dontcare[88];$/;"	m	struct:__anon7	access:public
drawRect_buffer	game/inc/video.h	/^void drawRect_buffer(const uint8_t*,int,int,int,int);$/;"	p	signature:(const uint8_t*,int,int,int,int)
drawRect_buffer	game/lib/video.c	/^inline void drawRect_buffer(const uint8_t *src, int x, int y, int w, int h){$/;"	f	signature:(const uint8_t *src, int x, int y, int w, int h)
draw_screen	game/src/effect.c	/^void draw_screen() {$/;"	f
draw_screen	game/src/game_loop.c	/^void draw_screen();$/;"	p	file:
ds	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
e_ehsize	boot/inc/elf.h	/^	uint16_t e_ehsize;$/;"	m	struct:Elf	access:public
e_ehsize	kernel/inc/elf.h	/^	uint16_t e_ehsize;$/;"	m	struct:Elf	access:public
e_elf	boot/inc/elf.h	/^	uint8_t e_elf[12];$/;"	m	struct:Elf	access:public
e_elf	kernel/inc/elf.h	/^	uint8_t e_elf[12];$/;"	m	struct:Elf	access:public
e_entry	boot/inc/elf.h	/^	uint32_t e_entry;$/;"	m	struct:Elf	access:public
e_entry	kernel/inc/elf.h	/^	uint32_t e_entry;$/;"	m	struct:Elf	access:public
e_flags	boot/inc/elf.h	/^	uint32_t e_flags;$/;"	m	struct:Elf	access:public
e_flags	kernel/inc/elf.h	/^	uint32_t e_flags;$/;"	m	struct:Elf	access:public
e_machine	boot/inc/elf.h	/^	uint16_t e_machine;$/;"	m	struct:Elf	access:public
e_machine	kernel/inc/elf.h	/^	uint16_t e_machine;$/;"	m	struct:Elf	access:public
e_magic	boot/inc/elf.h	/^	uint32_t e_magic;	\/\/ must equal ELF_MAGIC$/;"	m	struct:Elf	access:public
e_magic	kernel/inc/elf.h	/^	uint32_t e_magic;	\/\/ must equal ELF_MAGIC$/;"	m	struct:Elf	access:public
e_phentsize	boot/inc/elf.h	/^	uint16_t e_phentsize;$/;"	m	struct:Elf	access:public
e_phentsize	kernel/inc/elf.h	/^	uint16_t e_phentsize;$/;"	m	struct:Elf	access:public
e_phnum	boot/inc/elf.h	/^	uint16_t e_phnum;$/;"	m	struct:Elf	access:public
e_phnum	kernel/inc/elf.h	/^	uint16_t e_phnum;$/;"	m	struct:Elf	access:public
e_phoff	boot/inc/elf.h	/^	uint32_t e_phoff;$/;"	m	struct:Elf	access:public
e_phoff	kernel/inc/elf.h	/^	uint32_t e_phoff;$/;"	m	struct:Elf	access:public
e_shentsize	boot/inc/elf.h	/^	uint16_t e_shentsize;$/;"	m	struct:Elf	access:public
e_shentsize	kernel/inc/elf.h	/^	uint16_t e_shentsize;$/;"	m	struct:Elf	access:public
e_shnum	boot/inc/elf.h	/^	uint16_t e_shnum;$/;"	m	struct:Elf	access:public
e_shnum	kernel/inc/elf.h	/^	uint16_t e_shnum;$/;"	m	struct:Elf	access:public
e_shoff	boot/inc/elf.h	/^	uint32_t e_shoff;$/;"	m	struct:Elf	access:public
e_shoff	kernel/inc/elf.h	/^	uint32_t e_shoff;$/;"	m	struct:Elf	access:public
e_shstrndx	boot/inc/elf.h	/^	uint16_t e_shstrndx;$/;"	m	struct:Elf	access:public
e_shstrndx	kernel/inc/elf.h	/^	uint16_t e_shstrndx;$/;"	m	struct:Elf	access:public
e_type	boot/inc/elf.h	/^	uint16_t e_type;$/;"	m	struct:Elf	access:public
e_type	kernel/inc/elf.h	/^	uint16_t e_type;$/;"	m	struct:Elf	access:public
e_version	boot/inc/elf.h	/^	uint32_t e_version;$/;"	m	struct:Elf	access:public
e_version	kernel/inc/elf.h	/^	uint32_t e_version;$/;"	m	struct:Elf	access:public
eax	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
eax	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
ebp	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
ebp	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
ebx	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
ebx	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
ecx	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
ecx	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
edi	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
edi	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
edx	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
edx	tools/hh/mmu.h	/^	uint32_t ebx, edx, ecx, eax;   \/\/ Register saved by pushal$/;"	m	struct:TrapFrame	access:public
eflags	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
eflags	tools/hh/mmu.h	/^	uint32_t eflags; \/\/ Execution state before trap $/;"	m	struct:TrapFrame	access:public
eip	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
eip	tools/hh/mmu.h	/^	uint32_t eip;$/;"	m	struct:TrapFrame	access:public
enable_bullet	game/src/effect.c	/^bool enable_bullet;$/;"	v
enable_reborn	game/lib/keyboard.c	/^void enable_reborn();$/;"	p	file:
enable_reborn	game/main.c	/^void enable_reborn() {$/;"	f
enemy	game/src/effect.c	/^} *enemy_head, *enemy_avail, enemy[NR_ENEMY];$/;"	v	typeref:struct:Enemy
enemy_avail	game/src/effect.c	/^} *enemy_head, *enemy_avail, enemy[NR_ENEMY];$/;"	v	typeref:struct:Enemy
enemy_head	game/src/effect.c	/^} *enemy_head, *enemy_avail, enemy[NR_ENEMY];$/;"	v	typeref:struct:Enemy
err	tools/hh/mmu.h	/^	uint32_t err;$/;"	m	struct:TrapFrame	access:public
error_code	kernel/inc/irq.h	/^	uint32_t error_code, eip, cs, eflags;$/;"	m	struct:TrapFrame	access:public
es	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
esi	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
esi	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
esp	tools/hh/mmu.h	/^	uint32_t esp; $/;"	m	struct:TrapFrame	access:public
esp0	tools/hh/mmu.h	/^	uint32_t esp0;         \/\/ Ring 0 Stack pointer and segment selector$/;"	m	struct:__anon7	access:public
esp_	tools/hh/mmu.h	/^	uint32_t edi, esi, ebp, esp_;$/;"	m	struct:TrapFrame	access:public
false	boot/inc/types.h	/^enum { false, true };$/;"	e	enum:__anon1
false	game/inc/types.h	/^enum { false, true };$/;"	e	enum:__anon11
false	kernel/inc/types.h	/^enum { false, true };$/;"	e	enum:__anon3
fs	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
gImage_Bullet	game/data/Bullet.c	/^const unsigned char gImage_Bullet[960] = {$/;"	v
gImage_FeiFan_1	game/data/FeiFan_1.c	/^const unsigned char gImage_FeiFan_1[19200] = { \/* 0X00,0X18,0X50,0X00,0X50,0X00,0X00,0X39, *\/$/;"	v
gImage_FeiFan_2	game/data/FeiFan_2.c	/^const unsigned char gImage_FeiFan_2[19200] = { \/* 0X00,0X18,0X50,0X00,0X50,0X00,0X00,0X39, *\/$/;"	v
gImage_FeiFan_3	game/data/FeiFan_3.c	/^const unsigned char gImage_FeiFan_3[19200] = { \/* 0X00,0X18,0X50,0X00,0X50,0X00,0X00,0X39, *\/$/;"	v
gImage_FeiFan_4	game/data/FeiFan_4.c	/^const unsigned char gImage_FeiFan_4[19200] = { \/* 0X00,0X18,0X50,0X00,0X50,0X00,0X00,0X39, *\/$/;"	v
gImage_FeiFan_5	game/data/FeiFan_5.c	/^const unsigned char gImage_FeiFan_5[19200] = { \/* 0X00,0X18,0X50,0X00,0X50,0X00,0X00,0X39, *\/$/;"	v
gImage_LowSing	game/data/LowSing.c	/^const unsigned char gImage_LowSing[19200] = { \/* 0X00,0X18,0X50,0X00,0X50,0X00,0X00,0X39, *\/$/;"	v
gImage_PARK	kernel/data/PARK.c	/^const unsigned char gImage_PARK[1440000] = {$/;"	v
game_loop	game/main.c	/^void game_loop();$/;"	p	file:
game_loop	game/src/game_loop.c	/^void game_loop()$/;"	f
game_main	game/main.c	/^void game_main()$/;"	f
gd_args	boot/inc/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:GateDescriptor	access:public
gd_args	kernel/inc/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:GateDescriptor	access:public
gd_dpl	boot/inc/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:GateDescriptor	access:public
gd_dpl	kernel/inc/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:GateDescriptor	access:public
gd_off_15_0	boot/inc/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
gd_off_15_0	kernel/inc/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
gd_off_31_16	boot/inc/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
gd_off_31_16	kernel/inc/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
gd_p	boot/inc/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:GateDescriptor	access:public
gd_p	kernel/inc/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:GateDescriptor	access:public
gd_rsv1	boot/inc/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:GateDescriptor	access:public
gd_rsv1	kernel/inc/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:GateDescriptor	access:public
gd_s	boot/inc/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:GateDescriptor	access:public
gd_s	kernel/inc/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:GateDescriptor	access:public
gd_sel	boot/inc/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:GateDescriptor	access:public
gd_sel	kernel/inc/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:GateDescriptor	access:public
gd_type	boot/inc/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:GateDescriptor	access:public
gd_type	kernel/inc/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:GateDescriptor	access:public
gdt	boot/start.S	/^gdt:$/;"	l
gdt	tools/hh/kvm.c	/^static SegDesc gdt[NR_SEGMENTS];$/;"	v	file:
gdtdesc	boot/start.S	/^gdtdesc:$/;"	l
generate_bullet	game/src/effect.c	/^bool generate_bullet() {$/;"	f
generate_bullet	game/src/game_loop.c	/^bool generate_bullet();$/;"	p	file:
generate_enemy	game/src/effect.c	/^bool generate_enemy() {$/;"	f
generate_enemy	game/src/game_loop.c	/^bool generate_enemy();$/;"	p	file:
get_kbd	game/inc/syscall.h	/^int get_kbd();$/;"	p	signature:()
get_kbd	game/lib/syscall.c	/^int get_kbd() {$/;"	f
get_press_key	game/lib/keyboard.c	/^void get_press_key(uint8_t keycode) {$/;"	f	signature:(uint8_t keycode)
get_press_key	game/lib/keyboard.c	/^void get_press_key(uint8_t);$/;"	p	file:
get_release_key	game/lib/keyboard.c	/^void get_release_key(uint8_t keycode) {$/;"	f	signature:(uint8_t keycode)
get_release_key	game/lib/keyboard.c	/^void get_release_key(uint8_t);$/;"	p	file:
get_time	game/inc/syscall.h	/^int get_time();$/;"	p	signature:()
get_time	game/lib/syscall.c	/^int get_time() {$/;"	f
granularity	kernel/inc/device/video_mode.h	/^	uint16_t granularity;$/;"	m	struct:ModeInfoBlock	access:public
granularity	tools/hh/mmu.h	/^	uint32_t granularity         : 1;$/;"	m	struct:SegmentDescriptor	access:public
green	game/inc/video.h	/^		uint8_t green;$/;"	m	struct:Pixels::__anon10	access:public
green	kernel/inc/device/video.h	/^		uint8_t green;$/;"	m	struct:Pixels::__anon2	access:public
green_mask	kernel/inc/device/video_mode.h	/^	uint8_t green_mask, green_position;$/;"	m	struct:ModeInfoBlock	access:public
green_position	kernel/inc/device/video_mode.h	/^	uint8_t green_mask, green_position;$/;"	m	struct:ModeInfoBlock	access:public
gs	tools/hh/mmu.h	/^	uint32_t gs,fs,es,ds;   \/\/ Segment register$/;"	m	struct:TrapFrame	access:public
h	game/inc/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
h	game/src/effect.c	/^	int w, h;$/;"	m	struct:Enemy	file:	access:public
h	game/src/effect.c	/^	int w,h;$/;"	m	struct:Bullet	file:	access:public
h	kernel/inc/device/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
handle_count	kernel/irq/irq_handle.c	/^static int handle_count = 0;$/;"	v	file:
handle_keys	kernel/device/keyboard.c	/^int handle_keys() {$/;"	f
handle_keys	kernel/inc/device/keyboard.h	/^int handle_keys();$/;"	p	signature:()
handle_keys	kernel/syscall/do_syscall.c	/^int handle_keys();$/;"	p	file:
handle_pool	kernel/irq/irq_handle.c	/^static struct IRQ_t handle_pool[NR_IRQ_HANDLE];$/;"	v	typeref:struct:IRQ_t	file:
handles	kernel/irq/irq_handle.c	/^static struct IRQ_t *handles[NR_HARD_INTR]; \/\/ handles is an array of lists$/;"	v	typeref:struct:IRQ_t	file:
hlt	boot/inc/x86.h	/^hlt(void)$/;"	f	signature:(void)
hlt	boot/inc/x86.h	/^static __inline void hlt(void) __attribute__((always_inline));$/;"	p	signature:(void)
hlt	game/inc/x86.h	/^hlt(void)$/;"	f	signature:(void)
hlt	game/inc/x86.h	/^static __inline void hlt(void) __attribute__((always_inline));$/;"	p	signature:(void)
hlt	kernel/inc/x86.h	/^hlt(void)$/;"	f	signature:(void)
hlt	kernel/inc/x86.h	/^static __inline void hlt(void) __attribute__((always_inline));$/;"	p	signature:(void)
idt	kernel/irq/idt.c	/^Gatedesc idt[NR_IRQ];$/;"	v
image_pages	kernel/inc/device/video_mode.h	/^	uint8_t memory_model, bank_size, image_pages;$/;"	m	struct:ModeInfoBlock	access:public
inb	boot/inc/x86.h	/^inb(int port)$/;"	f	signature:(int port)
inb	boot/inc/x86.h	/^static __inline uint8_t inb(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inb	game/inc/x86.h	/^inb(int port)$/;"	f	signature:(int port)
inb	game/inc/x86.h	/^static __inline uint8_t inb(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inb	kernel/inc/x86.h	/^inb(int port)$/;"	f	signature:(int port)
inb	kernel/inc/x86.h	/^static __inline uint8_t inb(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inc_player	game/src/effect.c	/^int x_player, inc_player;$/;"	v
init_effect	game/main.c	/^void init_effect();$/;"	p	file:
init_effect	game/src/effect.c	/^void init_effect() {$/;"	f
init_i8259	kernel/irq/i8259.c	/^void init_i8259(void) {$/;"	f	signature:(void)
init_i8259	kernel/main.c	/^void init_i8259();$/;"	p	file:
init_idt	kernel/irq/idt.c	/^void init_idt() {$/;"	f
init_idt	kernel/main.c	/^void init_idt();$/;"	p	file:
init_segment	tools/hh/kvm.c	/^init_segment(void) {$/;"	f	signature:(void)
init_serial	kernel/lib/serial.c	/^void init_serial() {$/;"	f
init_serial	kernel/main.c	/^void init_serial();$/;"	p	file:
init_timer	kernel/device/timer.c	/^void init_timer() {$/;"	f
init_timer	kernel/main.c	/^void init_timer();$/;"	p	file:
init_vmem	kernel/device/video.c	/^void init_vmem() {$/;"	f
init_vmem	kernel/inc/device/video.h	/^void init_vmem();$/;"	p	signature:()
init_vmem_addr	kernel/device/video.c	/^void init_vmem_addr() {$/;"	f
init_vmem_addr	kernel/inc/device/video.h	/^void init_vmem_addr();$/;"	p	signature:()
init_vmem_addr	kernel/main.c	/^void init_vmem_addr();$/;"	p	file:
inl	boot/inc/x86.h	/^inl(int port)$/;"	f	signature:(int port)
inl	boot/inc/x86.h	/^static __inline uint32_t inl(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inl	game/inc/x86.h	/^inl(int port)$/;"	f	signature:(int port)
inl	game/inc/x86.h	/^static __inline uint32_t inl(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inl	kernel/inc/x86.h	/^inl(int port)$/;"	f	signature:(int port)
inl	kernel/inc/x86.h	/^static __inline uint32_t inl(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
insb	boot/inc/x86.h	/^insb(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insb	boot/inc/x86.h	/^static __inline void insb(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insb	game/inc/x86.h	/^insb(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insb	game/inc/x86.h	/^static __inline void insb(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insb	kernel/inc/x86.h	/^insb(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insb	kernel/inc/x86.h	/^static __inline void insb(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insl	boot/inc/x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insl	boot/inc/x86.h	/^static __inline void insl(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insl	game/inc/x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insl	game/inc/x86.h	/^static __inline void insl(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insl	kernel/inc/x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insl	kernel/inc/x86.h	/^static __inline void insl(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insw	boot/inc/x86.h	/^insw(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insw	boot/inc/x86.h	/^static __inline void insw(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insw	game/inc/x86.h	/^insw(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insw	game/inc/x86.h	/^static __inline void insw(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insw	kernel/inc/x86.h	/^insw(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insw	kernel/inc/x86.h	/^static __inline void insw(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
int16_t	boot/inc/types.h	/^typedef short int16_t;$/;"	t
int16_t	game/inc/types.h	/^typedef short int16_t;$/;"	t
int16_t	kernel/inc/types.h	/^typedef short int16_t;$/;"	t
int32_t	boot/inc/types.h	/^typedef int int32_t;$/;"	t
int32_t	game/inc/types.h	/^typedef int int32_t;$/;"	t
int32_t	kernel/inc/types.h	/^typedef int int32_t;$/;"	t
int64_t	boot/inc/types.h	/^typedef long long int64_t;$/;"	t
int64_t	game/inc/types.h	/^typedef long long int64_t;$/;"	t
int64_t	kernel/inc/types.h	/^typedef long long int64_t;$/;"	t
int8_t	boot/inc/types.h	/^typedef __signed char int8_t;$/;"	t
int8_t	game/inc/types.h	/^typedef __signed char int8_t;$/;"	t
int8_t	kernel/inc/types.h	/^typedef __signed char int8_t;$/;"	t
intptr_t	boot/inc/types.h	/^typedef int32_t intptr_t;$/;"	t
intptr_t	game/inc/types.h	/^typedef int32_t intptr_t;$/;"	t
intptr_t	kernel/inc/types.h	/^typedef int32_t intptr_t;$/;"	t
invlpg	boot/inc/x86.h	/^invlpg(void *addr)$/;"	f	signature:(void *addr)
invlpg	boot/inc/x86.h	/^static __inline void invlpg(void *addr) __attribute__((always_inline));$/;"	p	signature:(void *addr)
invlpg	game/inc/x86.h	/^invlpg(void *addr)$/;"	f	signature:(void *addr)
invlpg	game/inc/x86.h	/^static __inline void invlpg(void *addr) __attribute__((always_inline));$/;"	p	signature:(void *addr)
invlpg	kernel/inc/x86.h	/^invlpg(void *addr)$/;"	f	signature:(void *addr)
invlpg	kernel/inc/x86.h	/^static __inline void invlpg(void *addr) __attribute__((always_inline));$/;"	p	signature:(void *addr)
inw	boot/inc/x86.h	/^inw(int port)$/;"	f	signature:(int port)
inw	boot/inc/x86.h	/^static __inline uint16_t inw(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inw	game/inc/x86.h	/^inw(int port)$/;"	f	signature:(int port)
inw	game/inc/x86.h	/^static __inline uint16_t inw(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inw	kernel/inc/x86.h	/^inw(int port)$/;"	f	signature:(int port)
inw	kernel/inc/x86.h	/^static __inline uint16_t inw(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
irq	kernel/inc/irq.h	/^	int32_t irq;$/;"	m	struct:TrapFrame	access:public
irq	tools/hh/mmu.h	/^	int irq;$/;"	m	struct:TrapFrame	access:public
irq0	kernel/irq/idt.c	/^void irq0();$/;"	p	file:
irq1	kernel/irq/idt.c	/^void irq1();$/;"	p	file:
irq14	kernel/irq/idt.c	/^void irq14();$/;"	p	file:
irq_empty	kernel/irq/do_irq.S	/^			irq_empty:	pushl $0;  pushl   $-1; jmp asm_do_irq$/;"	l
irq_empty	kernel/irq/idt.c	/^void irq_empty();$/;"	p	file:
irq_handle	kernel/irq/irq_handle.c	/^void irq_handle(TrapFrame *tf) {$/;"	f	signature:(TrapFrame *tf)
is_serial_idle	kernel/lib/serial.c	/^int is_serial_idle() {$/;"	f
key_state	kernel/device/keyboard.c	/^static int key_state[NR_KEYS];$/;"	v	file:
keyboard_event	kernel/device/keyboard.c	/^void keyboard_event(void) {$/;"	f	signature:(void)
keyboard_event	kernel/inc/device/keyboard.h	/^void keyboard_event();$/;"	p	signature:()
keyboard_event	kernel/main.c	/^void keyboard_event();$/;"	p	file:
keycode_array	game/lib/keyboard.c	/^static const int keycode_array[] = {$/;"	v	file:
keycode_array	kernel/device/keyboard.c	/^static const int keycode_array[] = {$/;"	v	file:
lcr0	boot/inc/x86.h	/^lcr0(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr0	boot/inc/x86.h	/^static __inline void lcr0(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr0	game/inc/x86.h	/^lcr0(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr0	game/inc/x86.h	/^static __inline void lcr0(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr0	kernel/inc/x86.h	/^lcr0(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr0	kernel/inc/x86.h	/^static __inline void lcr0(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr3	boot/inc/x86.h	/^lcr3(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr3	boot/inc/x86.h	/^static __inline void lcr3(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr3	game/inc/x86.h	/^lcr3(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr3	game/inc/x86.h	/^static __inline void lcr3(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr3	kernel/inc/x86.h	/^lcr3(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr3	kernel/inc/x86.h	/^static __inline void lcr3(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr4	boot/inc/x86.h	/^lcr4(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr4	boot/inc/x86.h	/^static __inline void lcr4(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr4	game/inc/x86.h	/^lcr4(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr4	game/inc/x86.h	/^static __inline void lcr4(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr4	kernel/inc/x86.h	/^lcr4(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr4	kernel/inc/x86.h	/^static __inline void lcr4(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lgdt	boot/inc/x86.h	/^lgdt(void *p)$/;"	f	signature:(void *p)
lgdt	game/inc/x86.h	/^lgdt(void *p)$/;"	f	signature:(void *p)
lgdt	kernel/inc/x86.h	/^lgdt(void *p)$/;"	f	signature:(void *p)
lidt	boot/inc/x86.h	/^lidt(void *p)$/;"	f	signature:(void *p)
lidt	boot/inc/x86.h	/^static __inline void lidt(void *p) __attribute__((always_inline));$/;"	p	signature:(void *p)
lidt	game/inc/x86.h	/^lidt(void *p)$/;"	f	signature:(void *p)
lidt	game/inc/x86.h	/^static __inline void lidt(void *p) __attribute__((always_inline));$/;"	p	signature:(void *p)
lidt	kernel/inc/x86.h	/^lidt(void *p)$/;"	f	signature:(void *p)
lidt	kernel/inc/x86.h	/^static __inline void lidt(void *p) __attribute__((always_inline));$/;"	p	signature:(void *p)
limit_15_0	tools/hh/mmu.h	/^	uint32_t limit_15_0          : 16;$/;"	m	struct:SegmentDescriptor	access:public
limit_19_16	tools/hh/mmu.h	/^	uint32_t limit_19_16         : 4;$/;"	m	struct:SegmentDescriptor	access:public
link	tools/hh/mmu.h	/^	uint32_t link;         \/\/ old ts selector$/;"	m	struct:__anon7	access:public
lldt	boot/inc/x86.h	/^lldt(uint16_t sel)$/;"	f	signature:(uint16_t sel)
lldt	boot/inc/x86.h	/^static __inline void lldt(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
lldt	game/inc/x86.h	/^lldt(uint16_t sel)$/;"	f	signature:(uint16_t sel)
lldt	game/inc/x86.h	/^static __inline void lldt(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
lldt	kernel/inc/x86.h	/^lldt(uint16_t sel)$/;"	f	signature:(uint16_t sel)
lldt	kernel/inc/x86.h	/^static __inline void lldt(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
load_vmem	kernel/device/video.c	/^int load_vmem(uint8_t *buffer) {$/;"	f	signature:(uint8_t *buffer)
load_vmem	kernel/inc/device/video.h	/^int load_vmem(uint8_t*);$/;"	p	signature:(uint8_t*)
load_vmem	kernel/syscall/do_syscall.c	/^int load_vmem(uint8_t*);$/;"	p	file:	signature:(uint8_t*)
ltr	boot/inc/x86.h	/^ltr(uint16_t sel)$/;"	f	signature:(uint16_t sel)
ltr	boot/inc/x86.h	/^static __inline void ltr(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
ltr	game/inc/x86.h	/^ltr(uint16_t sel)$/;"	f	signature:(uint16_t sel)
ltr	game/inc/x86.h	/^static __inline void ltr(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
ltr	kernel/inc/x86.h	/^ltr(uint16_t sel)$/;"	f	signature:(uint16_t sel)
ltr	kernel/inc/x86.h	/^static __inline void ltr(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
main	kernel/main.c	/^int main(void) {$/;"	f	signature:(void)
memcmp	game/inc/string.h	/^int	memcmp(const void *s1, const void *s2, size_t len);$/;"	p	signature:(const void *s1, const void *s2, size_t len)
memcmp	game/lib/string.c	/^memcmp(const void *v1, const void *v2, size_t n)$/;"	f	signature:(const void *v1, const void *v2, size_t n)
memcmp	kernel/inc/string.h	/^int	memcmp(const void *s1, const void *s2, size_t len);$/;"	p	signature:(const void *s1, const void *s2, size_t len)
memcmp	kernel/lib/string.c	/^memcmp(const void *v1, const void *v2, size_t n)$/;"	f	signature:(const void *v1, const void *v2, size_t n)
memcpy	game/inc/string.h	/^void *	memcpy(void *dst, const void *src, size_t len);$/;"	p	signature:(void *dst, const void *src, size_t len)
memcpy	game/lib/string.c	/^memcpy(void *dst, const void *src, size_t n)$/;"	f	signature:(void *dst, const void *src, size_t n)
memcpy	kernel/inc/string.h	/^void *	memcpy(void *dst, const void *src, size_t len);$/;"	p	signature:(void *dst, const void *src, size_t len)
memcpy	kernel/lib/string.c	/^memcpy(void *dst, const void *src, size_t n)$/;"	f	signature:(void *dst, const void *src, size_t n)
memfind	game/inc/string.h	/^void *	memfind(const void *s, int c, size_t len);$/;"	p	signature:(const void *s, int c, size_t len)
memfind	game/lib/string.c	/^memfind(const void *s, int c, size_t n)$/;"	f	signature:(const void *s, int c, size_t n)
memfind	kernel/inc/string.h	/^void *	memfind(const void *s, int c, size_t len);$/;"	p	signature:(const void *s, int c, size_t len)
memfind	kernel/lib/string.c	/^memfind(const void *s, int c, size_t n)$/;"	f	signature:(const void *s, int c, size_t n)
memmove	game/inc/string.h	/^void *	memmove(void *dst, const void *src, size_t len);$/;"	p	signature:(void *dst, const void *src, size_t len)
memmove	game/lib/string.c	/^memmove(void *dst, const void *src, size_t n)$/;"	f	signature:(void *dst, const void *src, size_t n)
memmove	kernel/inc/string.h	/^void *	memmove(void *dst, const void *src, size_t len);$/;"	p	signature:(void *dst, const void *src, size_t len)
memmove	kernel/lib/string.c	/^memmove(void *dst, const void *src, size_t n)$/;"	f	signature:(void *dst, const void *src, size_t n)
memory_model	kernel/inc/device/video_mode.h	/^	uint8_t memory_model, bank_size, image_pages;$/;"	m	struct:ModeInfoBlock	access:public
memset	game/inc/string.h	/^void *	memset(void *dst, int c, size_t len);$/;"	p	signature:(void *dst, int c, size_t len)
memset	game/lib/string.c	/^memset(void *v, int c, size_t n)$/;"	f	signature:(void *v, int c, size_t n)
memset	kernel/inc/string.h	/^void *	memset(void *dst, int c, size_t len);$/;"	p	signature:(void *dst, int c, size_t len)
memset	kernel/lib/string.c	/^memset(void *v, int c, size_t n)$/;"	f	signature:(void *v, int c, size_t n)
mode	kernel/device/timer.c	/^union CmdByte mode = {$/;"	v	typeref:union:CmdByte
myread	tools/Image2Lcd.sh	/^myread() {$/;"	f
next	game/src/effect.c	/^	struct Bullet *next;$/;"	m	struct:Bullet	typeref:struct:Bullet::Bullet	file:	access:public
next	game/src/effect.c	/^	struct Enemy *next;$/;"	m	struct:Enemy	typeref:struct:Enemy::Enemy	file:	access:public
next	kernel/irq/irq_handle.c	/^	struct IRQ_t *next;$/;"	m	struct:IRQ_t	typeref:struct:IRQ_t::IRQ_t	file:	access:public
off_t	boot/inc/types.h	/^typedef int32_t off_t;$/;"	t
off_t	game/inc/types.h	/^typedef int32_t off_t;$/;"	t
off_t	kernel/inc/types.h	/^typedef int32_t off_t;$/;"	t
offset_15_0	tools/hh/mmu.h	/^	uint32_t offset_15_0      : 16;\/\/low 16bit of offset in segment$/;"	m	struct:GateDescriptor	access:public
offset_31_16	tools/hh/mmu.h	/^	uint32_t offset_31_16     : 16;\/\/high bits of offset in segment$/;"	m	struct:GateDescriptor	access:public
offsetof	boot/inc/types.h	71;"	d
offsetof	game/inc/types.h	71;"	d
offsetof	kernel/inc/types.h	71;"	d
old_esp	kernel/inc/irq.h	/^	uint32_t edi, esi, ebp, old_esp, ebx, edx, ecx, eax;$/;"	m	struct:TrapFrame	access:public
operate_mode	kernel/device/timer.c	/^		uint8_t operate_mode : 3;$/;"	m	struct:CmdByte::__anon6	file:	access:public
operation_size	tools/hh/mmu.h	/^	uint32_t operation_size      : 1;$/;"	m	struct:SegmentDescriptor	access:public
out_num	kernel/lib/stdio.c	/^void out_num(unsigned int x, unsigned int base, bool SIGN){$/;"	f	signature:(unsigned int x, unsigned int base, bool SIGN)
out_num	kernel/lib/stdio.c	/^void out_num(unsigned, unsigned, bool);$/;"	p	file:	signature:(unsigned, unsigned, bool)
out_string	kernel/lib/stdio.c	/^void out_string(char *s){$/;"	f	signature:(char *s)
out_string	kernel/lib/stdio.c	/^void out_string(char*);$/;"	p	file:	signature:(char*)
outb	boot/inc/x86.h	/^outb(int port, uint8_t data)$/;"	f	signature:(int port, uint8_t data)
outb	boot/inc/x86.h	/^static __inline void outb(int port, uint8_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint8_t data)
outb	game/inc/x86.h	/^outb(int port, uint8_t data)$/;"	f	signature:(int port, uint8_t data)
outb	game/inc/x86.h	/^static __inline void outb(int port, uint8_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint8_t data)
outb	kernel/inc/x86.h	/^outb(int port, uint8_t data)$/;"	f	signature:(int port, uint8_t data)
outb	kernel/inc/x86.h	/^static __inline void outb(int port, uint8_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint8_t data)
outl	boot/inc/x86.h	/^outl(int port, uint32_t data)$/;"	f	signature:(int port, uint32_t data)
outl	boot/inc/x86.h	/^static __inline void outl(int port, uint32_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint32_t data)
outl	game/inc/x86.h	/^outl(int port, uint32_t data)$/;"	f	signature:(int port, uint32_t data)
outl	game/inc/x86.h	/^static __inline void outl(int port, uint32_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint32_t data)
outl	kernel/inc/x86.h	/^outl(int port, uint32_t data)$/;"	f	signature:(int port, uint32_t data)
outl	kernel/inc/x86.h	/^static __inline void outl(int port, uint32_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint32_t data)
outsb	boot/inc/x86.h	/^outsb(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsb	boot/inc/x86.h	/^static __inline void outsb(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsb	game/inc/x86.h	/^outsb(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsb	game/inc/x86.h	/^static __inline void outsb(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsb	kernel/inc/x86.h	/^outsb(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsb	kernel/inc/x86.h	/^static __inline void outsb(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsl	boot/inc/x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsl	boot/inc/x86.h	/^static __inline void outsl(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsl	game/inc/x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsl	game/inc/x86.h	/^static __inline void outsl(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsl	kernel/inc/x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsl	kernel/inc/x86.h	/^static __inline void outsl(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsw	boot/inc/x86.h	/^outsw(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsw	boot/inc/x86.h	/^static __inline void outsw(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsw	game/inc/x86.h	/^outsw(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsw	game/inc/x86.h	/^static __inline void outsw(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsw	kernel/inc/x86.h	/^outsw(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsw	kernel/inc/x86.h	/^static __inline void outsw(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outw	boot/inc/x86.h	/^outw(int port, uint16_t data)$/;"	f	signature:(int port, uint16_t data)
outw	boot/inc/x86.h	/^static __inline void outw(int port, uint16_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint16_t data)
outw	game/inc/x86.h	/^outw(int port, uint16_t data)$/;"	f	signature:(int port, uint16_t data)
outw	game/inc/x86.h	/^static __inline void outw(int port, uint16_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint16_t data)
outw	kernel/inc/x86.h	/^outw(int port, uint16_t data)$/;"	f	signature:(int port, uint16_t data)
outw	kernel/inc/x86.h	/^static __inline void outw(int port, uint16_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint16_t data)
p_align	boot/inc/elf.h	/^	uint32_t p_align;$/;"	m	struct:Proghdr	access:public
p_align	kernel/inc/elf.h	/^	uint32_t p_align;$/;"	m	struct:Proghdr	access:public
p_filesz	boot/inc/elf.h	/^	uint32_t p_filesz;$/;"	m	struct:Proghdr	access:public
p_filesz	kernel/inc/elf.h	/^	uint32_t p_filesz;$/;"	m	struct:Proghdr	access:public
p_flags	boot/inc/elf.h	/^	uint32_t p_flags;$/;"	m	struct:Proghdr	access:public
p_flags	kernel/inc/elf.h	/^	uint32_t p_flags;$/;"	m	struct:Proghdr	access:public
p_memsz	boot/inc/elf.h	/^	uint32_t p_memsz;$/;"	m	struct:Proghdr	access:public
p_memsz	kernel/inc/elf.h	/^	uint32_t p_memsz;$/;"	m	struct:Proghdr	access:public
p_offset	boot/inc/elf.h	/^	uint32_t p_offset;$/;"	m	struct:Proghdr	access:public
p_offset	kernel/inc/elf.h	/^	uint32_t p_offset;$/;"	m	struct:Proghdr	access:public
p_pa	boot/inc/elf.h	/^	uint32_t p_pa;$/;"	m	struct:Proghdr	access:public
p_pa	kernel/inc/elf.h	/^	uint32_t p_pa;$/;"	m	struct:Proghdr	access:public
p_type	boot/inc/elf.h	/^	uint32_t p_type;$/;"	m	struct:Proghdr	access:public
p_type	kernel/inc/elf.h	/^	uint32_t p_type;$/;"	m	struct:Proghdr	access:public
p_va	boot/inc/elf.h	/^	uint32_t p_va;$/;"	m	struct:Proghdr	access:public
p_va	kernel/inc/elf.h	/^	uint32_t p_va;$/;"	m	struct:Proghdr	access:public
pad0	tools/hh/mmu.h	/^	uint32_t pad0                : 1;$/;"	m	struct:SegmentDescriptor	access:public
pad0	tools/hh/mmu.h	/^	uint32_t pad0             : 8;\/\/low 5#args, 0 for interrupt\/trap gates high 3bit:reserved(should be 0 I guess)$/;"	m	struct:GateDescriptor	access:public
padding3	tools/hh/mmu.h	/^	uint16_t padding3;$/;"	m	struct:TrapFrame	access:public
padding4	tools/hh/mmu.h	/^	uint16_t padding4;$/;"	m	struct:TrapFrame	access:public
palette	cache/palette.c	/^static uint8_t palette[NR_PALETTE_ENTRY * 4] = {$/;"	v	file:
panic	kernel/inc/assert.h	26;"	d
pd_base	boot/inc/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
pd_base	kernel/inc/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
pd_base	tools/hh/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
pd_lim	boot/inc/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
pd_lim	kernel/inc/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
pd_lim	tools/hh/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
physaddr_t	boot/inc/types.h	/^typedef uint32_t physaddr_t;$/;"	t
physaddr_t	game/inc/types.h	/^typedef uint32_t physaddr_t;$/;"	t
physaddr_t	kernel/inc/types.h	/^typedef uint32_t physaddr_t;$/;"	t
physbase	kernel/inc/device/video_mode.h	/^	uint32_t physbase;  \/\/ your LFB (Linear Framebuffer) address ;)$/;"	m	struct:ModeInfoBlock	access:public
pitch	kernel/inc/device/video_mode.h	/^	uint16_t pitch; \/\/ bytes per scanline$/;"	m	struct:ModeInfoBlock	access:public
pixels	game/inc/video.h	/^	uint8_t *pixels;$/;"	m	struct:Surface	access:public
pixels	kernel/inc/device/video.h	/^	uint8_t *pixels;$/;"	m	struct:Surface	access:public
planes	kernel/inc/device/video_mode.h	/^	uint8_t Wchar, Ychar, planes, bpp, banks;$/;"	m	struct:ModeInfoBlock	access:public
ppn_t	boot/inc/types.h	/^typedef uint32_t ppn_t;$/;"	t
ppn_t	game/inc/types.h	/^typedef uint32_t ppn_t;$/;"	t
ppn_t	kernel/inc/types.h	/^typedef uint32_t ppn_t;$/;"	t
present	tools/hh/mmu.h	/^	uint32_t present             : 1;$/;"	m	struct:SegmentDescriptor	access:public
present	tools/hh/mmu.h	/^	uint32_t present          : 1;\/\/Present$/;"	m	struct:GateDescriptor	access:public
present_mode	kernel/device/timer.c	/^		uint8_t present_mode : 1;$/;"	m	struct:CmdByte::__anon6	file:	access:public
printk	kernel/inc/assert.h	/^int printk(const char *, ...);$/;"	p	signature:(const char *, ...)
printk	kernel/inc/stdio.h	/^int printk(const char *, ...);$/;"	p	signature:(const char *, ...)
printk	kernel/lib/stdio.c	/^int printk(const char *fmt, ...){$/;"	f	signature:(const char *fmt, ...)
printk	kernel/test/printk_test.c	/^int printk(const char *, ...);$/;"	p	file:	signature:(const char *, ...)
printk_test	kernel/main.c	/^void printk_test();$/;"	p	file:
printk_test	kernel/test/printk_test.c	/^void printk_test(){$/;"	f
privilege_level	tools/hh/mmu.h	/^	uint32_t privilege_level     : 2;$/;"	m	struct:SegmentDescriptor	access:public
privilege_level	tools/hh/mmu.h	/^	uint32_t privilege_level  : 2;\/\/descriptor(meaning new)privilege$/;"	m	struct:GateDescriptor	access:public
process_keys	game/inc/keyboard.h	/^bool process_keys();$/;"	p	signature:()
process_keys	game/lib/keyboard.c	/^bool process_keys() {$/;"	f
process_keys	game/main.c	/^bool process_keys();$/;"	p	file:
put_video	game/inc/syscall.h	/^int put_video(uint8_t*);$/;"	p	signature:(uint8_t*)
put_video	game/lib/syscall.c	/^int put_video(uint8_t *buffer) {$/;"	f	signature:(uint8_t *buffer)
rand	game/lib/random.c	/^uint32_t rand() {$/;"	f
rand	game/src/effect.c	/^uint32_t rand();$/;"	p	file:
rcr0	boot/inc/x86.h	/^rcr0(void)$/;"	f	signature:(void)
rcr0	boot/inc/x86.h	/^static __inline uint32_t rcr0(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr0	game/inc/x86.h	/^rcr0(void)$/;"	f	signature:(void)
rcr0	game/inc/x86.h	/^static __inline uint32_t rcr0(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr0	kernel/inc/x86.h	/^rcr0(void)$/;"	f	signature:(void)
rcr0	kernel/inc/x86.h	/^static __inline uint32_t rcr0(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr2	boot/inc/x86.h	/^rcr2(void)$/;"	f	signature:(void)
rcr2	boot/inc/x86.h	/^static __inline uint32_t rcr2(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr2	game/inc/x86.h	/^rcr2(void)$/;"	f	signature:(void)
rcr2	game/inc/x86.h	/^static __inline uint32_t rcr2(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr2	kernel/inc/x86.h	/^rcr2(void)$/;"	f	signature:(void)
rcr2	kernel/inc/x86.h	/^static __inline uint32_t rcr2(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr3	boot/inc/x86.h	/^rcr3(void)$/;"	f	signature:(void)
rcr3	boot/inc/x86.h	/^static __inline uint32_t rcr3(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr3	game/inc/x86.h	/^rcr3(void)$/;"	f	signature:(void)
rcr3	game/inc/x86.h	/^static __inline uint32_t rcr3(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr3	kernel/inc/x86.h	/^rcr3(void)$/;"	f	signature:(void)
rcr3	kernel/inc/x86.h	/^static __inline uint32_t rcr3(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr4	boot/inc/x86.h	/^rcr4(void)$/;"	f	signature:(void)
rcr4	boot/inc/x86.h	/^static __inline uint32_t rcr4(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr4	game/inc/x86.h	/^rcr4(void)$/;"	f	signature:(void)
rcr4	game/inc/x86.h	/^static __inline uint32_t rcr4(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr4	kernel/inc/x86.h	/^rcr4(void)$/;"	f	signature:(void)
rcr4	kernel/inc/x86.h	/^static __inline uint32_t rcr4(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_ebp	boot/inc/x86.h	/^read_ebp(void)$/;"	f	signature:(void)
read_ebp	boot/inc/x86.h	/^static __inline uint32_t read_ebp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_ebp	game/inc/x86.h	/^read_ebp(void)$/;"	f	signature:(void)
read_ebp	game/inc/x86.h	/^static __inline uint32_t read_ebp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_ebp	kernel/inc/x86.h	/^read_ebp(void)$/;"	f	signature:(void)
read_ebp	kernel/inc/x86.h	/^static __inline uint32_t read_ebp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_eflags	boot/inc/x86.h	/^read_eflags(void)$/;"	f	signature:(void)
read_eflags	boot/inc/x86.h	/^static __inline uint32_t read_eflags(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_eflags	game/inc/x86.h	/^read_eflags(void)$/;"	f	signature:(void)
read_eflags	game/inc/x86.h	/^static __inline uint32_t read_eflags(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_eflags	kernel/inc/x86.h	/^read_eflags(void)$/;"	f	signature:(void)
read_eflags	kernel/inc/x86.h	/^static __inline uint32_t read_eflags(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_esp	boot/inc/x86.h	/^read_esp(void)$/;"	f	signature:(void)
read_esp	boot/inc/x86.h	/^static __inline uint32_t read_esp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_esp	game/inc/x86.h	/^read_esp(void)$/;"	f	signature:(void)
read_esp	game/inc/x86.h	/^static __inline uint32_t read_esp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_esp	kernel/inc/x86.h	/^read_esp(void)$/;"	f	signature:(void)
read_esp	kernel/inc/x86.h	/^static __inline uint32_t read_esp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_palette	kernel/inc/device/palette.h	/^void read_palette();$/;"	p	signature:()
read_tsc	boot/inc/x86.h	/^read_tsc(void)$/;"	f	signature:(void)
read_tsc	boot/inc/x86.h	/^static __inline uint64_t read_tsc(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_tsc	game/inc/x86.h	/^read_tsc(void)$/;"	f	signature:(void)
read_tsc	game/inc/x86.h	/^static __inline uint64_t read_tsc(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_tsc	kernel/inc/x86.h	/^read_tsc(void)$/;"	f	signature:(void)
read_tsc	kernel/inc/x86.h	/^static __inline uint64_t read_tsc(void) __attribute__((always_inline));$/;"	p	signature:(void)
readsect	boot/boot.c	/^void readsect(void *dst, int offset) {$/;"	f	signature:(void *dst, int offset)
readsect	kernel/main.c	/^void readsect(void *dst, int offset) {$/;"	f	signature:(void *dst, int offset)
readseg	boot/boot.c	/^void readseg(unsigned char *pa, int count, int offset) {$/;"	f	signature:(unsigned char *pa, int count, int offset)
readseg	boot/boot.c	/^void readseg(unsigned char*,int,int);$/;"	p	file:	signature:(unsigned char*,int,int)
readseg	kernel/main.c	/^void readseg(unsigned char *pa, int count, int offset) {$/;"	f	signature:(unsigned char *pa, int count, int offset)
readseg	kernel/main.c	/^void readseg(unsigned char*,int,int);$/;"	p	file:	signature:(unsigned char*,int,int)
realFctPtr	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
reborn	game/main.c	/^static bool reborn;$/;"	v	file:
rec_out_num	kernel/lib/stdio.c	/^void rec_out_num(unsigned int x, unsigned int base){$/;"	f	signature:(unsigned int x, unsigned int base)
red	game/inc/video.h	/^		uint8_t red;$/;"	m	struct:Pixels::__anon10	access:public
red	kernel/inc/device/video.h	/^		uint8_t red;$/;"	m	struct:Pixels::__anon2	access:public
red_mask	kernel/inc/device/video_mode.h	/^	uint8_t red_mask, red_position;$/;"	m	struct:ModeInfoBlock	access:public
red_position	kernel/inc/device/video_mode.h	/^	uint8_t red_mask, red_position;$/;"	m	struct:ModeInfoBlock	access:public
reserved0	kernel/inc/device/video_mode.h	/^	uint8_t reserved0;$/;"	m	struct:ModeInfoBlock	access:public
reserved1	kernel/inc/device/video_mode.h	/^	uint32_t reserved1;$/;"	m	struct:ModeInfoBlock	access:public
reserved2	kernel/inc/device/video_mode.h	/^	uint16_t reserved2;$/;"	m	struct:ModeInfoBlock	access:public
routine	kernel/irq/irq_handle.c	/^	void (*routine)(void);$/;"	m	struct:IRQ_t	file:	access:public
rsv_mask	kernel/inc/device/video_mode.h	/^	uint8_t rsv_mask, rsv_position;$/;"	m	struct:ModeInfoBlock	access:public
rsv_position	kernel/inc/device/video_mode.h	/^	uint8_t rsv_mask, rsv_position;$/;"	m	struct:ModeInfoBlock	access:public
sd_avl	boot/inc/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:SegmentDescriptor	access:public
sd_avl	kernel/inc/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:SegmentDescriptor	access:public
sd_base_15_0	boot/inc/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
sd_base_15_0	kernel/inc/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
sd_base_23_16	boot/inc/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
sd_base_23_16	kernel/inc/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
sd_base_31_24	boot/inc/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
sd_base_31_24	kernel/inc/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:SegmentDescriptor	access:public
sd_db	boot/inc/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:SegmentDescriptor	access:public
sd_db	kernel/inc/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:SegmentDescriptor	access:public
sd_dpl	boot/inc/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:SegmentDescriptor	access:public
sd_dpl	kernel/inc/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:SegmentDescriptor	access:public
sd_g	boot/inc/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:SegmentDescriptor	access:public
sd_g	kernel/inc/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:SegmentDescriptor	access:public
sd_lim_15_0	boot/inc/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
sd_lim_15_0	kernel/inc/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
sd_lim_19_16	boot/inc/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
sd_lim_19_16	kernel/inc/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:SegmentDescriptor	access:public
sd_p	boot/inc/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:SegmentDescriptor	access:public
sd_p	kernel/inc/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:SegmentDescriptor	access:public
sd_rsv1	boot/inc/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:SegmentDescriptor	access:public
sd_rsv1	kernel/inc/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:SegmentDescriptor	access:public
sd_s	boot/inc/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:SegmentDescriptor	access:public
sd_s	kernel/inc/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:SegmentDescriptor	access:public
sd_type	boot/inc/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:SegmentDescriptor	access:public
sd_type	kernel/inc/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:SegmentDescriptor	access:public
seed	game/lib/random.c	/^static uint32_t seed = 0;$/;"	v	file:
segment	tools/hh/mmu.h	/^	uint32_t segment          : 16;\/\/segment selector$/;"	m	struct:GateDescriptor	access:public
segmentA	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
segmentB	kernel/inc/device/video_mode.h	/^	uint16_t segmentA, segmentB, VBE_FAR, realFctPtr;$/;"	m	struct:ModeInfoBlock	access:public
segment_type	tools/hh/mmu.h	/^	uint32_t segment_type        : 1;$/;"	m	struct:SegmentDescriptor	access:public
serial_output_test	kernel/lib/serial.c	/^void serial_output_test(){$/;"	f
serial_output_test	kernel/main.c	/^void serial_output_test();$/;"	p	file:
serial_printc	kernel/lib/serial.c	/^void serial_printc(char a){$/;"	f	signature:(char a)
serial_printc	kernel/lib/stdio.c	/^void serial_printc(char);$/;"	p	file:	signature:(char)
set_intr	kernel/irq/idt.c	/^static void set_intr(Gatedesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	f	file:	signature:(Gatedesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl)
set_segment	tools/hh/kvm.c	/^set_segment(SegDesc *ptr, uint32_t pl, uint32_t type) {$/;"	f	file:	signature:(SegDesc *ptr, uint32_t pl, uint32_t type)
set_trap	kernel/irq/idt.c	/^static void set_trap(Gatedesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl) {$/;"	f	file:	signature:(Gatedesc *ptr, uint32_t selector, uint32_t offset, uint32_t dpl)
set_tss	tools/hh/kvm.c	/^set_tss(SegDesc *ptr) {$/;"	f	file:	signature:(SegDesc *ptr)
sh_addr	boot/inc/elf.h	/^	uint32_t sh_addr;$/;"	m	struct:Secthdr	access:public
sh_addr	kernel/inc/elf.h	/^	uint32_t sh_addr;$/;"	m	struct:Secthdr	access:public
sh_addralign	boot/inc/elf.h	/^	uint32_t sh_addralign;$/;"	m	struct:Secthdr	access:public
sh_addralign	kernel/inc/elf.h	/^	uint32_t sh_addralign;$/;"	m	struct:Secthdr	access:public
sh_entsize	boot/inc/elf.h	/^	uint32_t sh_entsize;$/;"	m	struct:Secthdr	access:public
sh_entsize	kernel/inc/elf.h	/^	uint32_t sh_entsize;$/;"	m	struct:Secthdr	access:public
sh_flags	boot/inc/elf.h	/^	uint32_t sh_flags;$/;"	m	struct:Secthdr	access:public
sh_flags	kernel/inc/elf.h	/^	uint32_t sh_flags;$/;"	m	struct:Secthdr	access:public
sh_info	boot/inc/elf.h	/^	uint32_t sh_info;$/;"	m	struct:Secthdr	access:public
sh_info	kernel/inc/elf.h	/^	uint32_t sh_info;$/;"	m	struct:Secthdr	access:public
sh_link	boot/inc/elf.h	/^	uint32_t sh_link;$/;"	m	struct:Secthdr	access:public
sh_link	kernel/inc/elf.h	/^	uint32_t sh_link;$/;"	m	struct:Secthdr	access:public
sh_name	boot/inc/elf.h	/^	uint32_t sh_name;$/;"	m	struct:Secthdr	access:public
sh_name	kernel/inc/elf.h	/^	uint32_t sh_name;$/;"	m	struct:Secthdr	access:public
sh_offset	boot/inc/elf.h	/^	uint32_t sh_offset;$/;"	m	struct:Secthdr	access:public
sh_offset	kernel/inc/elf.h	/^	uint32_t sh_offset;$/;"	m	struct:Secthdr	access:public
sh_size	boot/inc/elf.h	/^	uint32_t sh_size;$/;"	m	struct:Secthdr	access:public
sh_size	kernel/inc/elf.h	/^	uint32_t sh_size;$/;"	m	struct:Secthdr	access:public
sh_type	boot/inc/elf.h	/^	uint32_t sh_type;$/;"	m	struct:Secthdr	access:public
sh_type	kernel/inc/elf.h	/^	uint32_t sh_type;$/;"	m	struct:Secthdr	access:public
size_t	boot/inc/types.h	/^typedef uint32_t size_t;$/;"	t
size_t	game/inc/types.h	/^typedef uint32_t size_t;$/;"	t
size_t	kernel/inc/types.h	/^typedef uint32_t size_t;$/;"	t
soft_use	tools/hh/mmu.h	/^	uint32_t soft_use            : 1;$/;"	m	struct:SegmentDescriptor	access:public
srand	game/lib/random.c	/^void srand(uint32_t s) {$/;"	f	signature:(uint32_t s)
srand	game/src/effect.c	/^void srand(uint32_t);$/;"	p	file:
ss	tools/hh/mmu.h	/^	uint16_t ss;$/;"	m	struct:TrapFrame	access:public
ss0	tools/hh/mmu.h	/^	uint32_t ss0;          \/\/ after an increase in privilege level$/;"	m	struct:__anon7	access:public
ssize_t	boot/inc/types.h	/^typedef int32_t ssize_t;$/;"	t
ssize_t	game/inc/types.h	/^typedef int32_t ssize_t;$/;"	t
ssize_t	kernel/inc/types.h	/^typedef int32_t ssize_t;$/;"	t
start	boot/start.S	/^start:$/;"	l
start32	boot/start.S	/^start32:$/;"	l
sti	boot/inc/x86.h	/^static __inline void sti(void) __attribute__((always_inline));$/;"	p	signature:(void)
sti	boot/inc/x86.h	/^sti(void)$/;"	f	signature:(void)
sti	game/inc/x86.h	/^static __inline void sti(void) __attribute__((always_inline));$/;"	p	signature:(void)
sti	game/inc/x86.h	/^sti(void)$/;"	f	signature:(void)
sti	kernel/inc/x86.h	/^static __inline void sti(void) __attribute__((always_inline));$/;"	p	signature:(void)
sti	kernel/inc/x86.h	/^sti(void)$/;"	f	signature:(void)
strcat	game/inc/string.h	/^char *	strcat(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
strcat	game/lib/string.c	/^strcat(char *dst, const char *src)$/;"	f	signature:(char *dst, const char *src)
strcat	kernel/inc/string.h	/^char *	strcat(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
strcat	kernel/lib/string.c	/^strcat(char *dst, const char *src)$/;"	f	signature:(char *dst, const char *src)
strchr	game/inc/string.h	/^char *	strchr(const char *s, char c);$/;"	p	signature:(const char *s, char c)
strchr	game/lib/string.c	/^strchr(const char *s, char c)$/;"	f	signature:(const char *s, char c)
strchr	kernel/inc/string.h	/^char *	strchr(const char *s, char c);$/;"	p	signature:(const char *s, char c)
strchr	kernel/lib/string.c	/^strchr(const char *s, char c)$/;"	f	signature:(const char *s, char c)
strcmp	game/inc/string.h	/^int	strcmp(const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strcmp	game/lib/string.c	/^strcmp(const char *p, const char *q)$/;"	f	signature:(const char *p, const char *q)
strcmp	kernel/inc/string.h	/^int	strcmp(const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strcmp	kernel/lib/string.c	/^strcmp(const char *p, const char *q)$/;"	f	signature:(const char *p, const char *q)
strcpy	game/inc/string.h	/^char *	strcpy(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
strcpy	game/lib/string.c	/^strcpy(char *dst, const char *src)$/;"	f	signature:(char *dst, const char *src)
strcpy	kernel/inc/string.h	/^char *	strcpy(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
strcpy	kernel/lib/string.c	/^strcpy(char *dst, const char *src)$/;"	f	signature:(char *dst, const char *src)
strfind	game/inc/string.h	/^char *	strfind(const char *s, char c);$/;"	p	signature:(const char *s, char c)
strfind	game/lib/string.c	/^strfind(const char *s, char c)$/;"	f	signature:(const char *s, char c)
strfind	kernel/inc/string.h	/^char *	strfind(const char *s, char c);$/;"	p	signature:(const char *s, char c)
strfind	kernel/lib/string.c	/^strfind(const char *s, char c)$/;"	f	signature:(const char *s, char c)
strlcpy	game/inc/string.h	/^size_t	strlcpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strlcpy	game/lib/string.c	/^strlcpy(char *dst, const char *src, size_t size)$/;"	f	signature:(char *dst, const char *src, size_t size)
strlcpy	kernel/inc/string.h	/^size_t	strlcpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strlcpy	kernel/lib/string.c	/^strlcpy(char *dst, const char *src, size_t size)$/;"	f	signature:(char *dst, const char *src, size_t size)
strlen	game/inc/string.h	/^int	strlen(const char *s);$/;"	p	signature:(const char *s)
strlen	game/lib/string.c	/^strlen(const char *s)$/;"	f	signature:(const char *s)
strlen	kernel/inc/string.h	/^int	strlen(const char *s);$/;"	p	signature:(const char *s)
strlen	kernel/lib/string.c	/^strlen(const char *s)$/;"	f	signature:(const char *s)
strncmp	game/inc/string.h	/^int	strncmp(const char *s1, const char *s2, size_t size);$/;"	p	signature:(const char *s1, const char *s2, size_t size)
strncmp	game/lib/string.c	/^strncmp(const char *p, const char *q, size_t n)$/;"	f	signature:(const char *p, const char *q, size_t n)
strncmp	kernel/inc/string.h	/^int	strncmp(const char *s1, const char *s2, size_t size);$/;"	p	signature:(const char *s1, const char *s2, size_t size)
strncmp	kernel/lib/string.c	/^strncmp(const char *p, const char *q, size_t n)$/;"	f	signature:(const char *p, const char *q, size_t n)
strncpy	game/inc/string.h	/^char *	strncpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strncpy	game/lib/string.c	/^strncpy(char *dst, const char *src, size_t size) {$/;"	f	signature:(char *dst, const char *src, size_t size)
strncpy	kernel/inc/string.h	/^char *	strncpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strncpy	kernel/lib/string.c	/^strncpy(char *dst, const char *src, size_t size) {$/;"	f	signature:(char *dst, const char *src, size_t size)
strnlen	game/inc/string.h	/^int	strnlen(const char *s, size_t size);$/;"	p	signature:(const char *s, size_t size)
strnlen	game/lib/string.c	/^strnlen(const char *s, size_t size)$/;"	f	signature:(const char *s, size_t size)
strnlen	kernel/inc/string.h	/^int	strnlen(const char *s, size_t size);$/;"	p	signature:(const char *s, size_t size)
strnlen	kernel/lib/string.c	/^strnlen(const char *s, size_t size)$/;"	f	signature:(const char *s, size_t size)
strtol	game/inc/string.h	/^long	strtol(const char *s, char **endptr, int base);$/;"	p	signature:(const char *s, char **endptr, int base)
strtol	game/lib/string.c	/^strtol(const char *s, char **endptr, int base)$/;"	f	signature:(const char *s, char **endptr, int base)
strtol	kernel/inc/string.h	/^long	strtol(const char *s, char **endptr, int base);$/;"	p	signature:(const char *s, char **endptr, int base)
strtol	kernel/lib/string.c	/^strtol(const char *s, char **endptr, int base)$/;"	f	signature:(const char *s, char **endptr, int base)
syscall	game/lib/syscall.c	/^syscall(int id, ...) {$/;"	f	file:	signature:(int id, ...)
system	tools/hh/mmu.h	/^	uint32_t system           : 1;\/\/must be 0(system)$/;"	m	struct:GateDescriptor	access:public
time_tick	kernel/device/timer.c	/^volatile uint32_t time_tick = 0;$/;"	v
timer_event	kernel/device/timer.c	/^void timer_event(void) {$/;"	f	signature:(void)
timer_event	kernel/main.c	/^void timer_event();$/;"	p	file:
tlbflush	boot/inc/x86.h	/^static __inline void tlbflush(void) __attribute__((always_inline));$/;"	p	signature:(void)
tlbflush	boot/inc/x86.h	/^tlbflush(void)$/;"	f	signature:(void)
tlbflush	game/inc/x86.h	/^static __inline void tlbflush(void) __attribute__((always_inline));$/;"	p	signature:(void)
tlbflush	game/inc/x86.h	/^tlbflush(void)$/;"	f	signature:(void)
tlbflush	kernel/inc/x86.h	/^static __inline void tlbflush(void) __attribute__((always_inline));$/;"	p	signature:(void)
tlbflush	kernel/inc/x86.h	/^tlbflush(void)$/;"	f	signature:(void)
true	boot/inc/types.h	/^enum { false, true };$/;"	e	enum:__anon1
true	game/inc/types.h	/^enum { false, true };$/;"	e	enum:__anon11
true	kernel/inc/types.h	/^enum { false, true };$/;"	e	enum:__anon3
ts_cr3	boot/inc/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:TaskstateSegment	access:public
ts_cr3	kernel/inc/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:TaskstateSegment	access:public
ts_cr3	tools/hh/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:Taskstate	access:public
ts_cs	boot/inc/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:TaskstateSegment	access:public
ts_cs	kernel/inc/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:TaskstateSegment	access:public
ts_cs	tools/hh/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:Taskstate	access:public
ts_ds	boot/inc/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:TaskstateSegment	access:public
ts_ds	kernel/inc/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:TaskstateSegment	access:public
ts_ds	tools/hh/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:Taskstate	access:public
ts_eax	boot/inc/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:TaskstateSegment	access:public
ts_eax	kernel/inc/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:TaskstateSegment	access:public
ts_eax	tools/hh/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:Taskstate	access:public
ts_ebp	boot/inc/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:TaskstateSegment	access:public
ts_ebp	kernel/inc/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:TaskstateSegment	access:public
ts_ebp	tools/hh/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:Taskstate	access:public
ts_ebx	boot/inc/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:TaskstateSegment	access:public
ts_ebx	kernel/inc/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:TaskstateSegment	access:public
ts_ebx	tools/hh/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:Taskstate	access:public
ts_ecx	boot/inc/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:TaskstateSegment	access:public
ts_ecx	kernel/inc/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:TaskstateSegment	access:public
ts_ecx	tools/hh/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:Taskstate	access:public
ts_edi	boot/inc/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:TaskstateSegment	access:public
ts_edi	kernel/inc/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:TaskstateSegment	access:public
ts_edi	tools/hh/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:Taskstate	access:public
ts_edx	boot/inc/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:TaskstateSegment	access:public
ts_edx	kernel/inc/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:TaskstateSegment	access:public
ts_edx	tools/hh/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:Taskstate	access:public
ts_eflags	boot/inc/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:TaskstateSegment	access:public
ts_eflags	kernel/inc/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:TaskstateSegment	access:public
ts_eflags	tools/hh/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:Taskstate	access:public
ts_eip	boot/inc/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:TaskstateSegment	access:public
ts_eip	kernel/inc/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:TaskstateSegment	access:public
ts_eip	tools/hh/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:Taskstate	access:public
ts_es	boot/inc/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:TaskstateSegment	access:public
ts_es	kernel/inc/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:TaskstateSegment	access:public
ts_es	tools/hh/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:Taskstate	access:public
ts_esi	boot/inc/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:TaskstateSegment	access:public
ts_esi	kernel/inc/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:TaskstateSegment	access:public
ts_esi	tools/hh/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:Taskstate	access:public
ts_esp	boot/inc/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:TaskstateSegment	access:public
ts_esp	kernel/inc/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:TaskstateSegment	access:public
ts_esp	tools/hh/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:Taskstate	access:public
ts_esp0	boot/inc/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:TaskstateSegment	access:public
ts_esp0	kernel/inc/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:TaskstateSegment	access:public
ts_esp0	tools/hh/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:Taskstate	access:public
ts_esp1	boot/inc/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:TaskstateSegment	access:public
ts_esp1	kernel/inc/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:TaskstateSegment	access:public
ts_esp1	tools/hh/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:Taskstate	access:public
ts_esp2	boot/inc/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:TaskstateSegment	access:public
ts_esp2	kernel/inc/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:TaskstateSegment	access:public
ts_esp2	tools/hh/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:Taskstate	access:public
ts_fs	boot/inc/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:TaskstateSegment	access:public
ts_fs	kernel/inc/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:TaskstateSegment	access:public
ts_fs	tools/hh/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:Taskstate	access:public
ts_gs	boot/inc/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:TaskstateSegment	access:public
ts_gs	kernel/inc/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:TaskstateSegment	access:public
ts_gs	tools/hh/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:Taskstate	access:public
ts_iomb	boot/inc/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:TaskstateSegment	access:public
ts_iomb	kernel/inc/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:TaskstateSegment	access:public
ts_iomb	tools/hh/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:Taskstate	access:public
ts_ldt	boot/inc/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:TaskstateSegment	access:public
ts_ldt	kernel/inc/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:TaskstateSegment	access:public
ts_ldt	tools/hh/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:Taskstate	access:public
ts_link	boot/inc/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:TaskstateSegment	access:public
ts_link	kernel/inc/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:TaskstateSegment	access:public
ts_link	tools/hh/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:Taskstate	access:public
ts_padding1	boot/inc/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:TaskstateSegment	access:public
ts_padding1	kernel/inc/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:TaskstateSegment	access:public
ts_padding1	tools/hh/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:Taskstate	access:public
ts_padding10	boot/inc/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:TaskstateSegment	access:public
ts_padding10	kernel/inc/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:TaskstateSegment	access:public
ts_padding10	tools/hh/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:Taskstate	access:public
ts_padding2	boot/inc/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:TaskstateSegment	access:public
ts_padding2	kernel/inc/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:TaskstateSegment	access:public
ts_padding2	tools/hh/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:Taskstate	access:public
ts_padding3	boot/inc/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:TaskstateSegment	access:public
ts_padding3	kernel/inc/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:TaskstateSegment	access:public
ts_padding3	tools/hh/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:Taskstate	access:public
ts_padding4	boot/inc/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:TaskstateSegment	access:public
ts_padding4	kernel/inc/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:TaskstateSegment	access:public
ts_padding4	tools/hh/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:Taskstate	access:public
ts_padding5	boot/inc/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:TaskstateSegment	access:public
ts_padding5	kernel/inc/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:TaskstateSegment	access:public
ts_padding5	tools/hh/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:Taskstate	access:public
ts_padding6	boot/inc/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:TaskstateSegment	access:public
ts_padding6	kernel/inc/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:TaskstateSegment	access:public
ts_padding6	tools/hh/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:Taskstate	access:public
ts_padding7	boot/inc/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:TaskstateSegment	access:public
ts_padding7	kernel/inc/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:TaskstateSegment	access:public
ts_padding7	tools/hh/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:Taskstate	access:public
ts_padding8	boot/inc/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:TaskstateSegment	access:public
ts_padding8	kernel/inc/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:TaskstateSegment	access:public
ts_padding8	tools/hh/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:Taskstate	access:public
ts_padding9	boot/inc/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:TaskstateSegment	access:public
ts_padding9	kernel/inc/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:TaskstateSegment	access:public
ts_padding9	tools/hh/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:Taskstate	access:public
ts_ss	boot/inc/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:TaskstateSegment	access:public
ts_ss	kernel/inc/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:TaskstateSegment	access:public
ts_ss	tools/hh/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:Taskstate	access:public
ts_ss0	boot/inc/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:TaskstateSegment	access:public
ts_ss0	kernel/inc/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:TaskstateSegment	access:public
ts_ss0	tools/hh/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:Taskstate	access:public
ts_ss1	boot/inc/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:TaskstateSegment	access:public
ts_ss1	kernel/inc/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:TaskstateSegment	access:public
ts_ss1	tools/hh/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:Taskstate	access:public
ts_ss2	boot/inc/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:TaskstateSegment	access:public
ts_ss2	kernel/inc/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:TaskstateSegment	access:public
ts_ss2	tools/hh/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:Taskstate	access:public
ts_t	boot/inc/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:TaskstateSegment	access:public
ts_t	kernel/inc/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:TaskstateSegment	access:public
ts_t	tools/hh/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:Taskstate	access:public
tss	tools/hh/kvm.c	/^static TSS tss; $/;"	v	file:
type	tools/hh/mmu.h	/^	uint32_t type                : 4;$/;"	m	struct:SegmentDescriptor	access:public
type	tools/hh/mmu.h	/^	uint32_t type             : 4;\/\/type(STS_{TG,IG32,TG32})$/;"	m	struct:GateDescriptor	access:public
uint16_t	boot/inc/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	game/inc/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	kernel/inc/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	boot/inc/types.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	game/inc/types.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	kernel/inc/types.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	boot/inc/types.h	/^typedef unsigned long long uint64_t;$/;"	t
uint64_t	game/inc/types.h	/^typedef unsigned long long uint64_t;$/;"	t
uint64_t	kernel/inc/types.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	boot/inc/types.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	game/inc/types.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	kernel/inc/types.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	boot/inc/types.h	/^typedef uint32_t uintptr_t;$/;"	t
uintptr_t	game/inc/types.h	/^typedef uint32_t uintptr_t;$/;"	t
uintptr_t	kernel/inc/types.h	/^typedef uint32_t uintptr_t;$/;"	t
update_bullet	game/src/effect.c	/^bool update_bullet() {$/;"	f
update_bullet	game/src/game_loop.c	/^bool update_bullet();$/;"	p	file:
update_enemy	game/src/effect.c	/^bool update_enemy() {$/;"	f
update_enemy	game/src/game_loop.c	/^bool update_enemy();$/;"	p	file:
update_player	game/src/effect.c	/^void update_player() {$/;"	f
update_player	game/src/game_loop.c	/^void update_player();$/;"	p	file:
v_buffer	game/lib/video.c	/^uint8_t v_buffer[SCR_SIZE];$/;"	v
va_arg	kernel/inc/stdarg.h	10;"	d
va_end	kernel/inc/stdarg.h	12;"	d
va_list	kernel/inc/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
va_start	kernel/inc/stdarg.h	8;"	d
val	kernel/device/timer.c	/^	uint8_t val;$/;"	m	union:CmdByte	file:	access:public
vec0	kernel/irq/idt.c	/^void vec0();$/;"	p	file:
vec1	kernel/irq/idt.c	/^void vec1();$/;"	p	file:
vec10	kernel/irq/idt.c	/^void vec10();$/;"	p	file:
vec11	kernel/irq/idt.c	/^void vec11();$/;"	p	file:
vec12	kernel/irq/idt.c	/^void vec12();$/;"	p	file:
vec13	kernel/irq/idt.c	/^void vec13();$/;"	p	file:
vec14	kernel/irq/idt.c	/^void vec14();$/;"	p	file:
vec2	kernel/irq/idt.c	/^void vec2();$/;"	p	file:
vec3	kernel/irq/idt.c	/^void vec3();$/;"	p	file:
vec4	kernel/irq/idt.c	/^void vec4();$/;"	p	file:
vec5	kernel/irq/idt.c	/^void vec5();$/;"	p	file:
vec6	kernel/irq/idt.c	/^void vec6();$/;"	p	file:
vec7	kernel/irq/idt.c	/^void vec7();$/;"	p	file:
vec8	kernel/irq/idt.c	/^void vec8();$/;"	p	file:
vec9	kernel/irq/idt.c	/^void vec9();$/;"	p	file:
vecsys	kernel/irq/idt.c	/^void vecsys();$/;"	p	file:
vmem	kernel/device/video.c	/^uint8_t *vmem;$/;"	v
w	game/inc/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
w	game/src/effect.c	/^	int w, h;$/;"	m	struct:Enemy	file:	access:public
w	game/src/effect.c	/^	int w,h;$/;"	m	struct:Bullet	file:	access:public
w	kernel/inc/device/video.h	/^	int w, h;$/;"	m	struct:Surface	access:public
waitdisk	boot/boot.c	/^void waitdisk(void) {$/;"	f	signature:(void)
waitdisk	kernel/main.c	/^void waitdisk(void) {$/;"	f	signature:(void)
winA	kernel/inc/device/video_mode.h	/^    uint8_t winA,winB;$/;"	m	struct:ModeInfoBlock	access:public
winB	kernel/inc/device/video_mode.h	/^    uint8_t winA,winB;$/;"	m	struct:ModeInfoBlock	access:public
winsize	kernel/inc/device/video_mode.h	/^	uint16_t winsize;$/;"	m	struct:ModeInfoBlock	access:public
write_eflags	boot/inc/x86.h	/^static __inline void write_eflags(uint32_t eflags) __attribute__((always_inline));$/;"	p	signature:(uint32_t eflags)
write_eflags	boot/inc/x86.h	/^write_eflags(uint32_t eflags)$/;"	f	signature:(uint32_t eflags)
write_eflags	game/inc/x86.h	/^static __inline void write_eflags(uint32_t eflags) __attribute__((always_inline));$/;"	p	signature:(uint32_t eflags)
write_eflags	game/inc/x86.h	/^write_eflags(uint32_t eflags)$/;"	f	signature:(uint32_t eflags)
write_eflags	kernel/inc/x86.h	/^static __inline void write_eflags(uint32_t eflags) __attribute__((always_inline));$/;"	p	signature:(uint32_t eflags)
write_eflags	kernel/inc/x86.h	/^write_eflags(uint32_t eflags)$/;"	f	signature:(uint32_t eflags)
write_idtr	kernel/irq/idt.c	/^static void write_idtr(void *addr, uint32_t size) {$/;"	f	file:	signature:(void *addr, uint32_t size)
write_palette	cache/palette.c	/^void write_palette() {$/;"	f
write_palette	kernel/inc/device/palette.h	/^void write_palette();$/;"	p	signature:()
x	game/inc/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
x	game/src/effect.c	/^	int x, y;$/;"	m	struct:Enemy	file:	access:public
x	game/src/effect.c	/^	int x,y;$/;"	m	struct:Bullet	file:	access:public
x	kernel/inc/device/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
x_player	game/src/effect.c	/^int x_player, inc_player;$/;"	v
xchg	boot/inc/x86.h	/^xchg(volatile uint32_t *addr, uint32_t newval)$/;"	f	signature:(volatile uint32_t *addr, uint32_t newval)
xchg	game/inc/x86.h	/^xchg(volatile uint32_t *addr, uint32_t newval)$/;"	f	signature:(volatile uint32_t *addr, uint32_t newval)
xchg	kernel/inc/x86.h	/^xchg(volatile uint32_t *addr, uint32_t newval)$/;"	f	signature:(volatile uint32_t *addr, uint32_t newval)
y	game/inc/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
y	game/src/effect.c	/^	int x, y;$/;"	m	struct:Enemy	file:	access:public
y	game/src/effect.c	/^	int x,y;$/;"	m	struct:Bullet	file:	access:public
y	kernel/inc/device/video.h	/^	int x, y;$/;"	m	struct:Surface	access:public
